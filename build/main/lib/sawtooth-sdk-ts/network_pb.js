/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.DisconnectMessage', null, global);
goog.exportSymbol('proto.GetPeersRequest', null, global);
goog.exportSymbol('proto.GetPeersResponse', null, global);
goog.exportSymbol('proto.GossipBatchByBatchIdRequest', null, global);
goog.exportSymbol('proto.GossipBatchByTransactionIdRequest', null, global);
goog.exportSymbol('proto.GossipBatchResponse', null, global);
goog.exportSymbol('proto.GossipBlockRequest', null, global);
goog.exportSymbol('proto.GossipBlockResponse', null, global);
goog.exportSymbol('proto.GossipConsensusMessage', null, global);
goog.exportSymbol('proto.GossipMessage', null, global);
goog.exportSymbol('proto.GossipMessage.ContentType', null, global);
goog.exportSymbol('proto.NetworkAcknowledgement', null, global);
goog.exportSymbol('proto.NetworkAcknowledgement.Status', null, global);
goog.exportSymbol('proto.PeerRegisterRequest', null, global);
goog.exportSymbol('proto.PeerUnregisterRequest', null, global);
goog.exportSymbol('proto.PingRequest', null, global);
goog.exportSymbol('proto.PingResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DisconnectMessage = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DisconnectMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.DisconnectMessage.displayName = 'proto.DisconnectMessage';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.DisconnectMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.DisconnectMessage.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.DisconnectMessage} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.DisconnectMessage.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DisconnectMessage}
 */
proto.DisconnectMessage.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.DisconnectMessage;
    return proto.DisconnectMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DisconnectMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DisconnectMessage}
 */
proto.DisconnectMessage.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DisconnectMessage.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.DisconnectMessage.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DisconnectMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectMessage.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PeerRegisterRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PeerRegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.PeerRegisterRequest.displayName = 'proto.PeerRegisterRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.PeerRegisterRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.PeerRegisterRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.PeerRegisterRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.PeerRegisterRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            endpoint: jspb.Message.getFieldWithDefault(msg, 1, ""),
            protocolVersion: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PeerRegisterRequest}
 */
proto.PeerRegisterRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.PeerRegisterRequest;
    return proto.PeerRegisterRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PeerRegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PeerRegisterRequest}
 */
proto.PeerRegisterRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setEndpoint(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setProtocolVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PeerRegisterRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.PeerRegisterRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PeerRegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PeerRegisterRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEndpoint();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getProtocolVersion();
    if (f !== 0) {
        writer.writeUint32(2, f);
    }
};
/**
 * optional string endpoint = 1;
 * @return {string}
 */
proto.PeerRegisterRequest.prototype.getEndpoint = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.PeerRegisterRequest.prototype.setEndpoint = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional uint32 protocol_version = 2;
 * @return {number}
 */
proto.PeerRegisterRequest.prototype.getProtocolVersion = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.PeerRegisterRequest.prototype.setProtocolVersion = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PeerUnregisterRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PeerUnregisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.PeerUnregisterRequest.displayName = 'proto.PeerUnregisterRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.PeerUnregisterRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.PeerUnregisterRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.PeerUnregisterRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.PeerUnregisterRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PeerUnregisterRequest}
 */
proto.PeerUnregisterRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.PeerUnregisterRequest;
    return proto.PeerUnregisterRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PeerUnregisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PeerUnregisterRequest}
 */
proto.PeerUnregisterRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PeerUnregisterRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.PeerUnregisterRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PeerUnregisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PeerUnregisterRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetPeersRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetPeersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GetPeersRequest.displayName = 'proto.GetPeersRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GetPeersRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.GetPeersRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GetPeersRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GetPeersRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetPeersRequest}
 */
proto.GetPeersRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GetPeersRequest;
    return proto.GetPeersRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetPeersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetPeersRequest}
 */
proto.GetPeersRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetPeersRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GetPeersRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetPeersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetPeersRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetPeersResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.GetPeersResponse.repeatedFields_, null);
};
goog.inherits(proto.GetPeersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GetPeersResponse.displayName = 'proto.GetPeersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetPeersResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GetPeersResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.GetPeersResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GetPeersResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GetPeersResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            peerEndpointsList: jspb.Message.getRepeatedField(msg, 1)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetPeersResponse}
 */
proto.GetPeersResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GetPeersResponse;
    return proto.GetPeersResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetPeersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetPeersResponse}
 */
proto.GetPeersResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addPeerEndpoints(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetPeersResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GetPeersResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetPeersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetPeersResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPeerEndpointsList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
};
/**
 * repeated string peer_endpoints = 1;
 * @return {!Array<string>}
 */
proto.GetPeersResponse.prototype.getPeerEndpointsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array<string>} value */
proto.GetPeersResponse.prototype.setPeerEndpointsList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.GetPeersResponse.prototype.addPeerEndpoints = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.GetPeersResponse.prototype.clearPeerEndpointsList = function () {
    this.setPeerEndpointsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PingRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.PingRequest.displayName = 'proto.PingRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.PingRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.PingRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.PingRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.PingRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PingRequest}
 */
proto.PingRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.PingRequest;
    return proto.PingRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PingRequest}
 */
proto.PingRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PingRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.PingRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PingRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PingResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.PingResponse.displayName = 'proto.PingResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.PingResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.PingResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.PingResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.PingResponse.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PingResponse}
 */
proto.PingResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.PingResponse;
    return proto.PingResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PingResponse}
 */
proto.PingResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PingResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.PingResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PingResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GossipMessage = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GossipMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GossipMessage.displayName = 'proto.GossipMessage';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GossipMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.GossipMessage.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GossipMessage} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GossipMessage.toObject = function (includeInstance, msg) {
        var f, obj = {
            content: msg.getContent_asB64(),
            contentType: jspb.Message.getFieldWithDefault(msg, 2, 0),
            timeToLive: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GossipMessage}
 */
proto.GossipMessage.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GossipMessage;
    return proto.GossipMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GossipMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GossipMessage}
 */
proto.GossipMessage.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setContent(value);
                break;
            case 2:
                var value = /** @type {!proto.GossipMessage.ContentType} */ (reader.readEnum());
                msg.setContentType(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setTimeToLive(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GossipMessage.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GossipMessage.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GossipMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GossipMessage.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getContent_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getContentType();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
    f = message.getTimeToLive();
    if (f !== 0) {
        writer.writeUint32(3, f);
    }
};
/**
 * @enum {number}
 */
proto.GossipMessage.ContentType = {
    CONTENT_TYPE_UNSET: 0,
    BLOCK: 1,
    BATCH: 2
};
/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GossipMessage.prototype.getContent = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.GossipMessage.prototype.getContent_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContent()));
};
/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.GossipMessage.prototype.getContent_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContent()));
};
/** @param {!(string|Uint8Array)} value */
proto.GossipMessage.prototype.setContent = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * optional ContentType content_type = 2;
 * @return {!proto.GossipMessage.ContentType}
 */
proto.GossipMessage.prototype.getContentType = function () {
    return /** @type {!proto.GossipMessage.ContentType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.GossipMessage.ContentType} value */
proto.GossipMessage.prototype.setContentType = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * optional uint32 time_to_live = 3;
 * @return {number}
 */
proto.GossipMessage.prototype.getTimeToLive = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.GossipMessage.prototype.setTimeToLive = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkAcknowledgement = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkAcknowledgement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.NetworkAcknowledgement.displayName = 'proto.NetworkAcknowledgement';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.NetworkAcknowledgement.prototype.toObject = function (opt_includeInstance) {
        return proto.NetworkAcknowledgement.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.NetworkAcknowledgement} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.NetworkAcknowledgement.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkAcknowledgement}
 */
proto.NetworkAcknowledgement.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.NetworkAcknowledgement;
    return proto.NetworkAcknowledgement.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkAcknowledgement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkAcknowledgement}
 */
proto.NetworkAcknowledgement.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.NetworkAcknowledgement.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkAcknowledgement.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.NetworkAcknowledgement.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkAcknowledgement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkAcknowledgement.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.NetworkAcknowledgement.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    ERROR: 2
};
/**
 * optional Status status = 1;
 * @return {!proto.NetworkAcknowledgement.Status}
 */
proto.NetworkAcknowledgement.prototype.getStatus = function () {
    return /** @type {!proto.NetworkAcknowledgement.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.NetworkAcknowledgement.Status} value */
proto.NetworkAcknowledgement.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GossipBlockRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GossipBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GossipBlockRequest.displayName = 'proto.GossipBlockRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GossipBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.GossipBlockRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GossipBlockRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GossipBlockRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
            timeToLive: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GossipBlockRequest}
 */
proto.GossipBlockRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GossipBlockRequest;
    return proto.GossipBlockRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GossipBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GossipBlockRequest}
 */
proto.GossipBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBlockId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setNonce(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setTimeToLive(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GossipBlockRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GossipBlockRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GossipBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GossipBlockRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getNonce();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getTimeToLive();
    if (f !== 0) {
        writer.writeUint32(3, f);
    }
};
/**
 * optional string block_id = 1;
 * @return {string}
 */
proto.GossipBlockRequest.prototype.getBlockId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.GossipBlockRequest.prototype.setBlockId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.GossipBlockRequest.prototype.getNonce = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.GossipBlockRequest.prototype.setNonce = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional uint32 time_to_live = 3;
 * @return {number}
 */
proto.GossipBlockRequest.prototype.getTimeToLive = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.GossipBlockRequest.prototype.setTimeToLive = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GossipBlockResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GossipBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GossipBlockResponse.displayName = 'proto.GossipBlockResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GossipBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.GossipBlockResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GossipBlockResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GossipBlockResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            content: msg.getContent_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GossipBlockResponse}
 */
proto.GossipBlockResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GossipBlockResponse;
    return proto.GossipBlockResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GossipBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GossipBlockResponse}
 */
proto.GossipBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setContent(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GossipBlockResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GossipBlockResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GossipBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GossipBlockResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getContent_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GossipBlockResponse.prototype.getContent = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.GossipBlockResponse.prototype.getContent_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContent()));
};
/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.GossipBlockResponse.prototype.getContent_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContent()));
};
/** @param {!(string|Uint8Array)} value */
proto.GossipBlockResponse.prototype.setContent = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GossipBatchResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GossipBatchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GossipBatchResponse.displayName = 'proto.GossipBatchResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GossipBatchResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.GossipBatchResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GossipBatchResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GossipBatchResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            content: msg.getContent_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GossipBatchResponse}
 */
proto.GossipBatchResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GossipBatchResponse;
    return proto.GossipBatchResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GossipBatchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GossipBatchResponse}
 */
proto.GossipBatchResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setContent(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GossipBatchResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GossipBatchResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GossipBatchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GossipBatchResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getContent_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GossipBatchResponse.prototype.getContent = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.GossipBatchResponse.prototype.getContent_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContent()));
};
/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.GossipBatchResponse.prototype.getContent_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContent()));
};
/** @param {!(string|Uint8Array)} value */
proto.GossipBatchResponse.prototype.setContent = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GossipBatchByBatchIdRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GossipBatchByBatchIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GossipBatchByBatchIdRequest.displayName = 'proto.GossipBatchByBatchIdRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GossipBatchByBatchIdRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.GossipBatchByBatchIdRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GossipBatchByBatchIdRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GossipBatchByBatchIdRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, ""),
            nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
            timeToLive: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GossipBatchByBatchIdRequest}
 */
proto.GossipBatchByBatchIdRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GossipBatchByBatchIdRequest;
    return proto.GossipBatchByBatchIdRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GossipBatchByBatchIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GossipBatchByBatchIdRequest}
 */
proto.GossipBatchByBatchIdRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setNonce(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setTimeToLive(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GossipBatchByBatchIdRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GossipBatchByBatchIdRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GossipBatchByBatchIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GossipBatchByBatchIdRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getNonce();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getTimeToLive();
    if (f !== 0) {
        writer.writeUint32(3, f);
    }
};
/**
 * optional string id = 1;
 * @return {string}
 */
proto.GossipBatchByBatchIdRequest.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.GossipBatchByBatchIdRequest.prototype.setId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.GossipBatchByBatchIdRequest.prototype.getNonce = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.GossipBatchByBatchIdRequest.prototype.setNonce = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional uint32 time_to_live = 3;
 * @return {number}
 */
proto.GossipBatchByBatchIdRequest.prototype.getTimeToLive = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.GossipBatchByBatchIdRequest.prototype.setTimeToLive = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GossipBatchByTransactionIdRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.GossipBatchByTransactionIdRequest.repeatedFields_, null);
};
goog.inherits(proto.GossipBatchByTransactionIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GossipBatchByTransactionIdRequest.displayName = 'proto.GossipBatchByTransactionIdRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GossipBatchByTransactionIdRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GossipBatchByTransactionIdRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.GossipBatchByTransactionIdRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GossipBatchByTransactionIdRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GossipBatchByTransactionIdRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            idsList: jspb.Message.getRepeatedField(msg, 1),
            nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
            timeToLive: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GossipBatchByTransactionIdRequest}
 */
proto.GossipBatchByTransactionIdRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GossipBatchByTransactionIdRequest;
    return proto.GossipBatchByTransactionIdRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GossipBatchByTransactionIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GossipBatchByTransactionIdRequest}
 */
proto.GossipBatchByTransactionIdRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addIds(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setNonce(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setTimeToLive(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GossipBatchByTransactionIdRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GossipBatchByTransactionIdRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GossipBatchByTransactionIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GossipBatchByTransactionIdRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getIdsList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
    f = message.getNonce();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getTimeToLive();
    if (f !== 0) {
        writer.writeUint32(3, f);
    }
};
/**
 * repeated string ids = 1;
 * @return {!Array<string>}
 */
proto.GossipBatchByTransactionIdRequest.prototype.getIdsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array<string>} value */
proto.GossipBatchByTransactionIdRequest.prototype.setIdsList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.GossipBatchByTransactionIdRequest.prototype.addIds = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.GossipBatchByTransactionIdRequest.prototype.clearIdsList = function () {
    this.setIdsList([]);
};
/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.GossipBatchByTransactionIdRequest.prototype.getNonce = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.GossipBatchByTransactionIdRequest.prototype.setNonce = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional uint32 time_to_live = 3;
 * @return {number}
 */
proto.GossipBatchByTransactionIdRequest.prototype.getTimeToLive = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.GossipBatchByTransactionIdRequest.prototype.setTimeToLive = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GossipConsensusMessage = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GossipConsensusMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.GossipConsensusMessage.displayName = 'proto.GossipConsensusMessage';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.GossipConsensusMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.GossipConsensusMessage.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.GossipConsensusMessage} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.GossipConsensusMessage.toObject = function (includeInstance, msg) {
        var f, obj = {
            message: msg.getMessage_asB64(),
            senderId: msg.getSenderId_asB64(),
            timeToLive: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GossipConsensusMessage}
 */
proto.GossipConsensusMessage.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.GossipConsensusMessage;
    return proto.GossipConsensusMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GossipConsensusMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GossipConsensusMessage}
 */
proto.GossipConsensusMessage.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setMessage(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSenderId(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setTimeToLive(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GossipConsensusMessage.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.GossipConsensusMessage.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GossipConsensusMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GossipConsensusMessage.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMessage_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getSenderId_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getTimeToLive();
    if (f !== 0) {
        writer.writeUint32(3, f);
    }
};
/**
 * optional bytes message = 1;
 * @return {!(string|Uint8Array)}
 */
proto.GossipConsensusMessage.prototype.getMessage = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes message = 1;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.GossipConsensusMessage.prototype.getMessage_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getMessage()));
};
/**
 * optional bytes message = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.GossipConsensusMessage.prototype.getMessage_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getMessage()));
};
/** @param {!(string|Uint8Array)} value */
proto.GossipConsensusMessage.prototype.setMessage = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * optional bytes sender_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.GossipConsensusMessage.prototype.getSenderId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes sender_id = 2;
 * This is a type-conversion wrapper around `getSenderId()`
 * @return {string}
 */
proto.GossipConsensusMessage.prototype.getSenderId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSenderId()));
};
/**
 * optional bytes sender_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderId()`
 * @return {!Uint8Array}
 */
proto.GossipConsensusMessage.prototype.getSenderId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSenderId()));
};
/** @param {!(string|Uint8Array)} value */
proto.GossipConsensusMessage.prototype.setSenderId = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * optional uint32 time_to_live = 3;
 * @return {number}
 */
proto.GossipConsensusMessage.prototype.getTimeToLive = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.GossipConsensusMessage.prototype.setTimeToLive = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,