/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var client_list_control_pb = require('./client_list_control_pb.js');
goog.exportSymbol('proto.ClientStateGetRequest', null, global);
goog.exportSymbol('proto.ClientStateGetResponse', null, global);
goog.exportSymbol('proto.ClientStateGetResponse.Status', null, global);
goog.exportSymbol('proto.ClientStateListRequest', null, global);
goog.exportSymbol('proto.ClientStateListResponse', null, global);
goog.exportSymbol('proto.ClientStateListResponse.Entry', null, global);
goog.exportSymbol('proto.ClientStateListResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientStateListRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientStateListRequest.repeatedFields_, null);
};
goog.inherits(proto.ClientStateListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientStateListRequest.displayName = 'proto.ClientStateListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientStateListRequest.repeatedFields_ = [5];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientStateListRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientStateListRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientStateListRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientStateListRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            stateRoot: jspb.Message.getFieldWithDefault(msg, 1, ""),
            address: jspb.Message.getFieldWithDefault(msg, 3, ""),
            paging: (f = msg.getPaging()) && client_list_control_pb.ClientPagingControls.toObject(includeInstance, f),
            sortingList: jspb.Message.toObjectList(msg.getSortingList(), client_list_control_pb.ClientSortControls.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientStateListRequest}
 */
proto.ClientStateListRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientStateListRequest;
    return proto.ClientStateListRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientStateListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientStateListRequest}
 */
proto.ClientStateListRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setStateRoot(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 4:
                var value = new client_list_control_pb.ClientPagingControls;
                reader.readMessage(value, client_list_control_pb.ClientPagingControls.deserializeBinaryFromReader);
                msg.setPaging(value);
                break;
            case 5:
                var value = new client_list_control_pb.ClientSortControls;
                reader.readMessage(value, client_list_control_pb.ClientSortControls.deserializeBinaryFromReader);
                msg.addSorting(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientStateListRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientStateListRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientStateListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientStateListRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStateRoot();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getPaging();
    if (f != null) {
        writer.writeMessage(4, f, client_list_control_pb.ClientPagingControls.serializeBinaryToWriter);
    }
    f = message.getSortingList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(5, f, client_list_control_pb.ClientSortControls.serializeBinaryToWriter);
    }
};
/**
 * optional string state_root = 1;
 * @return {string}
 */
proto.ClientStateListRequest.prototype.getStateRoot = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ClientStateListRequest.prototype.setStateRoot = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string address = 3;
 * @return {string}
 */
proto.ClientStateListRequest.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.ClientStateListRequest.prototype.setAddress = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional ClientPagingControls paging = 4;
 * @return {?proto.ClientPagingControls}
 */
proto.ClientStateListRequest.prototype.getPaging = function () {
    return /** @type{?proto.ClientPagingControls} */ (jspb.Message.getWrapperField(this, client_list_control_pb.ClientPagingControls, 4));
};
/** @param {?proto.ClientPagingControls|undefined} value */
proto.ClientStateListRequest.prototype.setPaging = function (value) {
    jspb.Message.setWrapperField(this, 4, value);
};
proto.ClientStateListRequest.prototype.clearPaging = function () {
    this.setPaging(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientStateListRequest.prototype.hasPaging = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * repeated ClientSortControls sorting = 5;
 * @return {!Array<!proto.ClientSortControls>}
 */
proto.ClientStateListRequest.prototype.getSortingList = function () {
    return /** @type{!Array<!proto.ClientSortControls>} */ (jspb.Message.getRepeatedWrapperField(this, client_list_control_pb.ClientSortControls, 5));
};
/** @param {!Array<!proto.ClientSortControls>} value */
proto.ClientStateListRequest.prototype.setSortingList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 5, value);
};
/**
 * @param {!proto.ClientSortControls=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ClientSortControls}
 */
proto.ClientStateListRequest.prototype.addSorting = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ClientSortControls, opt_index);
};
proto.ClientStateListRequest.prototype.clearSortingList = function () {
    this.setSortingList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientStateListResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientStateListResponse.repeatedFields_, null);
};
goog.inherits(proto.ClientStateListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientStateListResponse.displayName = 'proto.ClientStateListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientStateListResponse.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientStateListResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientStateListResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientStateListResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientStateListResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            entriesList: jspb.Message.toObjectList(msg.getEntriesList(), proto.ClientStateListResponse.Entry.toObject, includeInstance),
            stateRoot: jspb.Message.getFieldWithDefault(msg, 3, ""),
            paging: (f = msg.getPaging()) && client_list_control_pb.ClientPagingResponse.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientStateListResponse}
 */
proto.ClientStateListResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientStateListResponse;
    return proto.ClientStateListResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientStateListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientStateListResponse}
 */
proto.ClientStateListResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ClientStateListResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = new proto.ClientStateListResponse.Entry;
                reader.readMessage(value, proto.ClientStateListResponse.Entry.deserializeBinaryFromReader);
                msg.addEntries(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setStateRoot(value);
                break;
            case 4:
                var value = new client_list_control_pb.ClientPagingResponse;
                reader.readMessage(value, client_list_control_pb.ClientPagingResponse.deserializeBinaryFromReader);
                msg.setPaging(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientStateListResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientStateListResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientStateListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientStateListResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getEntriesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.ClientStateListResponse.Entry.serializeBinaryToWriter);
    }
    f = message.getStateRoot();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getPaging();
    if (f != null) {
        writer.writeMessage(4, f, client_list_control_pb.ClientPagingResponse.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ClientStateListResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    INTERNAL_ERROR: 2,
    NOT_READY: 3,
    NO_ROOT: 4,
    NO_RESOURCE: 5,
    INVALID_PAGING: 6,
    INVALID_SORT: 7,
    INVALID_ADDRESS: 8,
    INVALID_ROOT: 9
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientStateListResponse.Entry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientStateListResponse.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientStateListResponse.Entry.displayName = 'proto.ClientStateListResponse.Entry';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientStateListResponse.Entry.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientStateListResponse.Entry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientStateListResponse.Entry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientStateListResponse.Entry.toObject = function (includeInstance, msg) {
        var f, obj = {
            address: jspb.Message.getFieldWithDefault(msg, 1, ""),
            data: msg.getData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientStateListResponse.Entry}
 */
proto.ClientStateListResponse.Entry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientStateListResponse.Entry;
    return proto.ClientStateListResponse.Entry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientStateListResponse.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientStateListResponse.Entry}
 */
proto.ClientStateListResponse.Entry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientStateListResponse.Entry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientStateListResponse.Entry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientStateListResponse.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientStateListResponse.Entry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};
/**
 * optional string address = 1;
 * @return {string}
 */
proto.ClientStateListResponse.Entry.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ClientStateListResponse.Entry.prototype.setAddress = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ClientStateListResponse.Entry.prototype.getData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ClientStateListResponse.Entry.prototype.getData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};
/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ClientStateListResponse.Entry.prototype.getData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};
/** @param {!(string|Uint8Array)} value */
proto.ClientStateListResponse.Entry.prototype.setData = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * optional Status status = 1;
 * @return {!proto.ClientStateListResponse.Status}
 */
proto.ClientStateListResponse.prototype.getStatus = function () {
    return /** @type {!proto.ClientStateListResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ClientStateListResponse.Status} value */
proto.ClientStateListResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * repeated Entry entries = 2;
 * @return {!Array<!proto.ClientStateListResponse.Entry>}
 */
proto.ClientStateListResponse.prototype.getEntriesList = function () {
    return /** @type{!Array<!proto.ClientStateListResponse.Entry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ClientStateListResponse.Entry, 2));
};
/** @param {!Array<!proto.ClientStateListResponse.Entry>} value */
proto.ClientStateListResponse.prototype.setEntriesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.ClientStateListResponse.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ClientStateListResponse.Entry}
 */
proto.ClientStateListResponse.prototype.addEntries = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ClientStateListResponse.Entry, opt_index);
};
proto.ClientStateListResponse.prototype.clearEntriesList = function () {
    this.setEntriesList([]);
};
/**
 * optional string state_root = 3;
 * @return {string}
 */
proto.ClientStateListResponse.prototype.getStateRoot = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.ClientStateListResponse.prototype.setStateRoot = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional ClientPagingResponse paging = 4;
 * @return {?proto.ClientPagingResponse}
 */
proto.ClientStateListResponse.prototype.getPaging = function () {
    return /** @type{?proto.ClientPagingResponse} */ (jspb.Message.getWrapperField(this, client_list_control_pb.ClientPagingResponse, 4));
};
/** @param {?proto.ClientPagingResponse|undefined} value */
proto.ClientStateListResponse.prototype.setPaging = function (value) {
    jspb.Message.setWrapperField(this, 4, value);
};
proto.ClientStateListResponse.prototype.clearPaging = function () {
    this.setPaging(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientStateListResponse.prototype.hasPaging = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientStateGetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientStateGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientStateGetRequest.displayName = 'proto.ClientStateGetRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientStateGetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientStateGetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientStateGetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientStateGetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            stateRoot: jspb.Message.getFieldWithDefault(msg, 1, ""),
            address: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientStateGetRequest}
 */
proto.ClientStateGetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientStateGetRequest;
    return proto.ClientStateGetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientStateGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientStateGetRequest}
 */
proto.ClientStateGetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setStateRoot(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientStateGetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientStateGetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientStateGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientStateGetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStateRoot();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string state_root = 1;
 * @return {string}
 */
proto.ClientStateGetRequest.prototype.getStateRoot = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ClientStateGetRequest.prototype.setStateRoot = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string address = 3;
 * @return {string}
 */
proto.ClientStateGetRequest.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.ClientStateGetRequest.prototype.setAddress = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientStateGetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientStateGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientStateGetResponse.displayName = 'proto.ClientStateGetResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientStateGetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientStateGetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientStateGetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientStateGetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            value: msg.getValue_asB64(),
            stateRoot: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientStateGetResponse}
 */
proto.ClientStateGetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientStateGetResponse;
    return proto.ClientStateGetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientStateGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientStateGetResponse}
 */
proto.ClientStateGetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ClientStateGetResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setValue(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setStateRoot(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientStateGetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientStateGetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientStateGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientStateGetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getValue_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getStateRoot();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * @enum {number}
 */
proto.ClientStateGetResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    INTERNAL_ERROR: 2,
    NOT_READY: 3,
    NO_ROOT: 4,
    NO_RESOURCE: 5,
    INVALID_ADDRESS: 6,
    INVALID_ROOT: 7
};
/**
 * optional Status status = 1;
 * @return {!proto.ClientStateGetResponse.Status}
 */
proto.ClientStateGetResponse.prototype.getStatus = function () {
    return /** @type {!proto.ClientStateGetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ClientStateGetResponse.Status} value */
proto.ClientStateGetResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ClientStateGetResponse.prototype.getValue = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.ClientStateGetResponse.prototype.getValue_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValue()));
};
/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.ClientStateGetResponse.prototype.getValue_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValue()));
};
/** @param {!(string|Uint8Array)} value */
proto.ClientStateGetResponse.prototype.setValue = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * optional string state_root = 3;
 * @return {string}
 */
proto.ClientStateGetResponse.prototype.getStateRoot = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.ClientStateGetResponse.prototype.setStateRoot = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,