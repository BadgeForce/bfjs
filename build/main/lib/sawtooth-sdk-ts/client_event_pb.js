/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var events_pb = require('./events_pb.js');
goog.exportSymbol('proto.ClientEventsGetRequest', null, global);
goog.exportSymbol('proto.ClientEventsGetResponse', null, global);
goog.exportSymbol('proto.ClientEventsGetResponse.Status', null, global);
goog.exportSymbol('proto.ClientEventsSubscribeRequest', null, global);
goog.exportSymbol('proto.ClientEventsSubscribeResponse', null, global);
goog.exportSymbol('proto.ClientEventsSubscribeResponse.Status', null, global);
goog.exportSymbol('proto.ClientEventsUnsubscribeRequest', null, global);
goog.exportSymbol('proto.ClientEventsUnsubscribeResponse', null, global);
goog.exportSymbol('proto.ClientEventsUnsubscribeResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientEventsSubscribeRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientEventsSubscribeRequest.repeatedFields_, null);
};
goog.inherits(proto.ClientEventsSubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientEventsSubscribeRequest.displayName = 'proto.ClientEventsSubscribeRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientEventsSubscribeRequest.repeatedFields_ = [1, 2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientEventsSubscribeRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientEventsSubscribeRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientEventsSubscribeRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientEventsSubscribeRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(), events_pb.EventSubscription.toObject, includeInstance),
            lastKnownBlockIdsList: jspb.Message.getRepeatedField(msg, 2)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientEventsSubscribeRequest}
 */
proto.ClientEventsSubscribeRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientEventsSubscribeRequest;
    return proto.ClientEventsSubscribeRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientEventsSubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientEventsSubscribeRequest}
 */
proto.ClientEventsSubscribeRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new events_pb.EventSubscription;
                reader.readMessage(value, events_pb.EventSubscription.deserializeBinaryFromReader);
                msg.addSubscriptions(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.addLastKnownBlockIds(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientEventsSubscribeRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientEventsSubscribeRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientEventsSubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientEventsSubscribeRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSubscriptionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, events_pb.EventSubscription.serializeBinaryToWriter);
    }
    f = message.getLastKnownBlockIdsList();
    if (f.length > 0) {
        writer.writeRepeatedString(2, f);
    }
};
/**
 * repeated EventSubscription subscriptions = 1;
 * @return {!Array<!proto.EventSubscription>}
 */
proto.ClientEventsSubscribeRequest.prototype.getSubscriptionsList = function () {
    return /** @type{!Array<!proto.EventSubscription>} */ (jspb.Message.getRepeatedWrapperField(this, events_pb.EventSubscription, 1));
};
/** @param {!Array<!proto.EventSubscription>} value */
proto.ClientEventsSubscribeRequest.prototype.setSubscriptionsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.EventSubscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EventSubscription}
 */
proto.ClientEventsSubscribeRequest.prototype.addSubscriptions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EventSubscription, opt_index);
};
proto.ClientEventsSubscribeRequest.prototype.clearSubscriptionsList = function () {
    this.setSubscriptionsList([]);
};
/**
 * repeated string last_known_block_ids = 2;
 * @return {!Array<string>}
 */
proto.ClientEventsSubscribeRequest.prototype.getLastKnownBlockIdsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};
/** @param {!Array<string>} value */
proto.ClientEventsSubscribeRequest.prototype.setLastKnownBlockIdsList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ClientEventsSubscribeRequest.prototype.addLastKnownBlockIds = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.ClientEventsSubscribeRequest.prototype.clearLastKnownBlockIdsList = function () {
    this.setLastKnownBlockIdsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientEventsSubscribeResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientEventsSubscribeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientEventsSubscribeResponse.displayName = 'proto.ClientEventsSubscribeResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientEventsSubscribeResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientEventsSubscribeResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientEventsSubscribeResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientEventsSubscribeResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            responseMessage: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientEventsSubscribeResponse}
 */
proto.ClientEventsSubscribeResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientEventsSubscribeResponse;
    return proto.ClientEventsSubscribeResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientEventsSubscribeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientEventsSubscribeResponse}
 */
proto.ClientEventsSubscribeResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ClientEventsSubscribeResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setResponseMessage(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientEventsSubscribeResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientEventsSubscribeResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientEventsSubscribeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientEventsSubscribeResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getResponseMessage();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * @enum {number}
 */
proto.ClientEventsSubscribeResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    INVALID_FILTER: 2,
    UNKNOWN_BLOCK: 3
};
/**
 * optional Status status = 1;
 * @return {!proto.ClientEventsSubscribeResponse.Status}
 */
proto.ClientEventsSubscribeResponse.prototype.getStatus = function () {
    return /** @type {!proto.ClientEventsSubscribeResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ClientEventsSubscribeResponse.Status} value */
proto.ClientEventsSubscribeResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional string response_message = 2;
 * @return {string}
 */
proto.ClientEventsSubscribeResponse.prototype.getResponseMessage = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.ClientEventsSubscribeResponse.prototype.setResponseMessage = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientEventsUnsubscribeRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientEventsUnsubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientEventsUnsubscribeRequest.displayName = 'proto.ClientEventsUnsubscribeRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientEventsUnsubscribeRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientEventsUnsubscribeRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientEventsUnsubscribeRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientEventsUnsubscribeRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientEventsUnsubscribeRequest}
 */
proto.ClientEventsUnsubscribeRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientEventsUnsubscribeRequest;
    return proto.ClientEventsUnsubscribeRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientEventsUnsubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientEventsUnsubscribeRequest}
 */
proto.ClientEventsUnsubscribeRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientEventsUnsubscribeRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientEventsUnsubscribeRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientEventsUnsubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientEventsUnsubscribeRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientEventsUnsubscribeResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientEventsUnsubscribeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientEventsUnsubscribeResponse.displayName = 'proto.ClientEventsUnsubscribeResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientEventsUnsubscribeResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientEventsUnsubscribeResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientEventsUnsubscribeResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientEventsUnsubscribeResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientEventsUnsubscribeResponse}
 */
proto.ClientEventsUnsubscribeResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientEventsUnsubscribeResponse;
    return proto.ClientEventsUnsubscribeResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientEventsUnsubscribeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientEventsUnsubscribeResponse}
 */
proto.ClientEventsUnsubscribeResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ClientEventsUnsubscribeResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientEventsUnsubscribeResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientEventsUnsubscribeResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientEventsUnsubscribeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientEventsUnsubscribeResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ClientEventsUnsubscribeResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    INTERNAL_ERROR: 2
};
/**
 * optional Status status = 1;
 * @return {!proto.ClientEventsUnsubscribeResponse.Status}
 */
proto.ClientEventsUnsubscribeResponse.prototype.getStatus = function () {
    return /** @type {!proto.ClientEventsUnsubscribeResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ClientEventsUnsubscribeResponse.Status} value */
proto.ClientEventsUnsubscribeResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientEventsGetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientEventsGetRequest.repeatedFields_, null);
};
goog.inherits(proto.ClientEventsGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientEventsGetRequest.displayName = 'proto.ClientEventsGetRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientEventsGetRequest.repeatedFields_ = [1, 2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientEventsGetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientEventsGetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientEventsGetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientEventsGetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(), events_pb.EventSubscription.toObject, includeInstance),
            blockIdsList: jspb.Message.getRepeatedField(msg, 2)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientEventsGetRequest}
 */
proto.ClientEventsGetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientEventsGetRequest;
    return proto.ClientEventsGetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientEventsGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientEventsGetRequest}
 */
proto.ClientEventsGetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new events_pb.EventSubscription;
                reader.readMessage(value, events_pb.EventSubscription.deserializeBinaryFromReader);
                msg.addSubscriptions(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.addBlockIds(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientEventsGetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientEventsGetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientEventsGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientEventsGetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSubscriptionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, events_pb.EventSubscription.serializeBinaryToWriter);
    }
    f = message.getBlockIdsList();
    if (f.length > 0) {
        writer.writeRepeatedString(2, f);
    }
};
/**
 * repeated EventSubscription subscriptions = 1;
 * @return {!Array<!proto.EventSubscription>}
 */
proto.ClientEventsGetRequest.prototype.getSubscriptionsList = function () {
    return /** @type{!Array<!proto.EventSubscription>} */ (jspb.Message.getRepeatedWrapperField(this, events_pb.EventSubscription, 1));
};
/** @param {!Array<!proto.EventSubscription>} value */
proto.ClientEventsGetRequest.prototype.setSubscriptionsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.EventSubscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EventSubscription}
 */
proto.ClientEventsGetRequest.prototype.addSubscriptions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EventSubscription, opt_index);
};
proto.ClientEventsGetRequest.prototype.clearSubscriptionsList = function () {
    this.setSubscriptionsList([]);
};
/**
 * repeated string block_ids = 2;
 * @return {!Array<string>}
 */
proto.ClientEventsGetRequest.prototype.getBlockIdsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};
/** @param {!Array<string>} value */
proto.ClientEventsGetRequest.prototype.setBlockIdsList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ClientEventsGetRequest.prototype.addBlockIds = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.ClientEventsGetRequest.prototype.clearBlockIdsList = function () {
    this.setBlockIdsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientEventsGetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientEventsGetResponse.repeatedFields_, null);
};
goog.inherits(proto.ClientEventsGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientEventsGetResponse.displayName = 'proto.ClientEventsGetResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientEventsGetResponse.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientEventsGetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientEventsGetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientEventsGetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientEventsGetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            eventsList: jspb.Message.toObjectList(msg.getEventsList(), events_pb.Event.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientEventsGetResponse}
 */
proto.ClientEventsGetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientEventsGetResponse;
    return proto.ClientEventsGetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientEventsGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientEventsGetResponse}
 */
proto.ClientEventsGetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ClientEventsGetResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = new events_pb.Event;
                reader.readMessage(value, events_pb.Event.deserializeBinaryFromReader);
                msg.addEvents(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientEventsGetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientEventsGetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientEventsGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientEventsGetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getEventsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, events_pb.Event.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ClientEventsGetResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    INTERNAL_ERROR: 2,
    INVALID_FILTER: 3,
    UNKNOWN_BLOCK: 4
};
/**
 * optional Status status = 1;
 * @return {!proto.ClientEventsGetResponse.Status}
 */
proto.ClientEventsGetResponse.prototype.getStatus = function () {
    return /** @type {!proto.ClientEventsGetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ClientEventsGetResponse.Status} value */
proto.ClientEventsGetResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * repeated Event events = 2;
 * @return {!Array<!proto.Event>}
 */
proto.ClientEventsGetResponse.prototype.getEventsList = function () {
    return /** @type{!Array<!proto.Event>} */ (jspb.Message.getRepeatedWrapperField(this, events_pb.Event, 2));
};
/** @param {!Array<!proto.Event>} value */
proto.ClientEventsGetResponse.prototype.setEventsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Event}
 */
proto.ClientEventsGetResponse.prototype.addEvents = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Event, opt_index);
};
proto.ClientEventsGetResponse.prototype.clearEventsList = function () {
    this.setEventsList([]);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,