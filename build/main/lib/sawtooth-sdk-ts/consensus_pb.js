/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.ConsensusBlock', null, global);
goog.exportSymbol('proto.ConsensusBlocksGetRequest', null, global);
goog.exportSymbol('proto.ConsensusBlocksGetResponse', null, global);
goog.exportSymbol('proto.ConsensusBlocksGetResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusBroadcastRequest', null, global);
goog.exportSymbol('proto.ConsensusBroadcastResponse', null, global);
goog.exportSymbol('proto.ConsensusBroadcastResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusCancelBlockRequest', null, global);
goog.exportSymbol('proto.ConsensusCancelBlockResponse', null, global);
goog.exportSymbol('proto.ConsensusCancelBlockResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusChainHeadGetRequest', null, global);
goog.exportSymbol('proto.ConsensusChainHeadGetResponse', null, global);
goog.exportSymbol('proto.ConsensusChainHeadGetResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusCheckBlocksRequest', null, global);
goog.exportSymbol('proto.ConsensusCheckBlocksResponse', null, global);
goog.exportSymbol('proto.ConsensusCheckBlocksResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusCommitBlockRequest', null, global);
goog.exportSymbol('proto.ConsensusCommitBlockResponse', null, global);
goog.exportSymbol('proto.ConsensusCommitBlockResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusFailBlockRequest', null, global);
goog.exportSymbol('proto.ConsensusFailBlockResponse', null, global);
goog.exportSymbol('proto.ConsensusFailBlockResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusFinalizeBlockRequest', null, global);
goog.exportSymbol('proto.ConsensusFinalizeBlockResponse', null, global);
goog.exportSymbol('proto.ConsensusFinalizeBlockResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusIgnoreBlockRequest', null, global);
goog.exportSymbol('proto.ConsensusIgnoreBlockResponse', null, global);
goog.exportSymbol('proto.ConsensusIgnoreBlockResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusInitializeBlockRequest', null, global);
goog.exportSymbol('proto.ConsensusInitializeBlockResponse', null, global);
goog.exportSymbol('proto.ConsensusInitializeBlockResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusNotifyAck', null, global);
goog.exportSymbol('proto.ConsensusNotifyBlockCommit', null, global);
goog.exportSymbol('proto.ConsensusNotifyBlockInvalid', null, global);
goog.exportSymbol('proto.ConsensusNotifyBlockNew', null, global);
goog.exportSymbol('proto.ConsensusNotifyBlockValid', null, global);
goog.exportSymbol('proto.ConsensusNotifyPeerConnected', null, global);
goog.exportSymbol('proto.ConsensusNotifyPeerDisconnected', null, global);
goog.exportSymbol('proto.ConsensusNotifyPeerMessage', null, global);
goog.exportSymbol('proto.ConsensusPeerInfo', null, global);
goog.exportSymbol('proto.ConsensusPeerMessage', null, global);
goog.exportSymbol('proto.ConsensusRegisterRequest', null, global);
goog.exportSymbol('proto.ConsensusRegisterResponse', null, global);
goog.exportSymbol('proto.ConsensusRegisterResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusSendToRequest', null, global);
goog.exportSymbol('proto.ConsensusSendToResponse', null, global);
goog.exportSymbol('proto.ConsensusSendToResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusSettingsEntry', null, global);
goog.exportSymbol('proto.ConsensusSettingsGetRequest', null, global);
goog.exportSymbol('proto.ConsensusSettingsGetResponse', null, global);
goog.exportSymbol('proto.ConsensusSettingsGetResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusStateEntry', null, global);
goog.exportSymbol('proto.ConsensusStateGetRequest', null, global);
goog.exportSymbol('proto.ConsensusStateGetResponse', null, global);
goog.exportSymbol('proto.ConsensusStateGetResponse.Status', null, global);
goog.exportSymbol('proto.ConsensusSummarizeBlockRequest', null, global);
goog.exportSymbol('proto.ConsensusSummarizeBlockResponse', null, global);
goog.exportSymbol('proto.ConsensusSummarizeBlockResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusPeerMessage = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusPeerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusPeerMessage.displayName = 'proto.ConsensusPeerMessage';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusPeerMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusPeerMessage.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusPeerMessage} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusPeerMessage.toObject = function (includeInstance, msg) {
        var f, obj = {
            messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
            content: msg.getContent_asB64(),
            name: jspb.Message.getFieldWithDefault(msg, 3, ""),
            version: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusPeerMessage}
 */
proto.ConsensusPeerMessage.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusPeerMessage;
    return proto.ConsensusPeerMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusPeerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusPeerMessage}
 */
proto.ConsensusPeerMessage.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setMessageType(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setContent(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusPeerMessage.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusPeerMessage.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusPeerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusPeerMessage.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMessageType();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getContent_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getVersion();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.ConsensusPeerMessage.prototype.getMessageType = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ConsensusPeerMessage.prototype.setMessageType = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusPeerMessage.prototype.getContent = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.ConsensusPeerMessage.prototype.getContent_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getContent()));
};
/**
 * optional bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.ConsensusPeerMessage.prototype.getContent_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getContent()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusPeerMessage.prototype.setContent = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * optional string name = 3;
 * @return {string}
 */
proto.ConsensusPeerMessage.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.ConsensusPeerMessage.prototype.setName = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string version = 4;
 * @return {string}
 */
proto.ConsensusPeerMessage.prototype.getVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/** @param {string} value */
proto.ConsensusPeerMessage.prototype.setVersion = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusBlock = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusBlock.displayName = 'proto.ConsensusBlock';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusBlock.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusBlock.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusBlock} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusBlock.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64(),
            previousId: msg.getPreviousId_asB64(),
            signerId: msg.getSignerId_asB64(),
            blockNum: jspb.Message.getFieldWithDefault(msg, 4, 0),
            payload: msg.getPayload_asB64(),
            summary: msg.getSummary_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusBlock}
 */
proto.ConsensusBlock.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusBlock;
    return proto.ConsensusBlock.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusBlock}
 */
proto.ConsensusBlock.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPreviousId(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSignerId(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setBlockNum(value);
                break;
            case 5:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPayload(value);
                break;
            case 6:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSummary(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusBlock.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusBlock.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusBlock.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getPreviousId_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getSignerId_asU8();
    if (f.length > 0) {
        writer.writeBytes(3, f);
    }
    f = message.getBlockNum();
    if (f !== 0) {
        writer.writeUint64(4, f);
    }
    f = message.getPayload_asU8();
    if (f.length > 0) {
        writer.writeBytes(5, f);
    }
    f = message.getSummary_asU8();
    if (f.length > 0) {
        writer.writeBytes(6, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusBlock.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusBlock.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusBlock.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusBlock.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * optional bytes previous_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusBlock.prototype.getPreviousId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes previous_id = 2;
 * This is a type-conversion wrapper around `getPreviousId()`
 * @return {string}
 */
proto.ConsensusBlock.prototype.getPreviousId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPreviousId()));
};
/**
 * optional bytes previous_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousId()`
 * @return {!Uint8Array}
 */
proto.ConsensusBlock.prototype.getPreviousId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPreviousId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusBlock.prototype.setPreviousId = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * optional bytes signer_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusBlock.prototype.getSignerId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * optional bytes signer_id = 3;
 * This is a type-conversion wrapper around `getSignerId()`
 * @return {string}
 */
proto.ConsensusBlock.prototype.getSignerId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignerId()));
};
/**
 * optional bytes signer_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignerId()`
 * @return {!Uint8Array}
 */
proto.ConsensusBlock.prototype.getSignerId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSignerId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusBlock.prototype.setSignerId = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};
/**
 * optional uint64 block_num = 4;
 * @return {number}
 */
proto.ConsensusBlock.prototype.getBlockNum = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/** @param {number} value */
proto.ConsensusBlock.prototype.setBlockNum = function (value) {
    jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional bytes payload = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusBlock.prototype.getPayload = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * optional bytes payload = 5;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.ConsensusBlock.prototype.getPayload_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};
/**
 * optional bytes payload = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.ConsensusBlock.prototype.getPayload_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusBlock.prototype.setPayload = function (value) {
    jspb.Message.setProto3BytesField(this, 5, value);
};
/**
 * optional bytes summary = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusBlock.prototype.getSummary = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};
/**
 * optional bytes summary = 6;
 * This is a type-conversion wrapper around `getSummary()`
 * @return {string}
 */
proto.ConsensusBlock.prototype.getSummary_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSummary()));
};
/**
 * optional bytes summary = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSummary()`
 * @return {!Uint8Array}
 */
proto.ConsensusBlock.prototype.getSummary_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSummary()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusBlock.prototype.setSummary = function (value) {
    jspb.Message.setProto3BytesField(this, 6, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusPeerInfo = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusPeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusPeerInfo.displayName = 'proto.ConsensusPeerInfo';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusPeerInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusPeerInfo.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusPeerInfo} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusPeerInfo.toObject = function (includeInstance, msg) {
        var f, obj = {
            peerId: msg.getPeerId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusPeerInfo}
 */
proto.ConsensusPeerInfo.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusPeerInfo;
    return proto.ConsensusPeerInfo.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusPeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusPeerInfo}
 */
proto.ConsensusPeerInfo.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPeerId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusPeerInfo.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusPeerInfo.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusPeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusPeerInfo.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPeerId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes peer_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusPeerInfo.prototype.getPeerId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes peer_id = 1;
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {string}
 */
proto.ConsensusPeerInfo.prototype.getPeerId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPeerId()));
};
/**
 * optional bytes peer_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {!Uint8Array}
 */
proto.ConsensusPeerInfo.prototype.getPeerId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPeerId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusPeerInfo.prototype.setPeerId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusSettingsEntry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusSettingsEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusSettingsEntry.displayName = 'proto.ConsensusSettingsEntry';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusSettingsEntry.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusSettingsEntry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusSettingsEntry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusSettingsEntry.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            value: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusSettingsEntry}
 */
proto.ConsensusSettingsEntry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusSettingsEntry;
    return proto.ConsensusSettingsEntry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusSettingsEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusSettingsEntry}
 */
proto.ConsensusSettingsEntry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusSettingsEntry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusSettingsEntry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusSettingsEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusSettingsEntry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.ConsensusSettingsEntry.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ConsensusSettingsEntry.prototype.setKey = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string value = 2;
 * @return {string}
 */
proto.ConsensusSettingsEntry.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.ConsensusSettingsEntry.prototype.setValue = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusStateEntry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusStateEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusStateEntry.displayName = 'proto.ConsensusStateEntry';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusStateEntry.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusStateEntry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusStateEntry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusStateEntry.toObject = function (includeInstance, msg) {
        var f, obj = {
            address: jspb.Message.getFieldWithDefault(msg, 1, ""),
            data: msg.getData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusStateEntry}
 */
proto.ConsensusStateEntry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusStateEntry;
    return proto.ConsensusStateEntry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusStateEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusStateEntry}
 */
proto.ConsensusStateEntry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusStateEntry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusStateEntry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusStateEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusStateEntry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};
/**
 * optional string address = 1;
 * @return {string}
 */
proto.ConsensusStateEntry.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ConsensusStateEntry.prototype.setAddress = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusStateEntry.prototype.getData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ConsensusStateEntry.prototype.getData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};
/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ConsensusStateEntry.prototype.getData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusStateEntry.prototype.setData = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusRegisterRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusRegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusRegisterRequest.displayName = 'proto.ConsensusRegisterRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusRegisterRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusRegisterRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusRegisterRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusRegisterRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            version: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusRegisterRequest}
 */
proto.ConsensusRegisterRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusRegisterRequest;
    return proto.ConsensusRegisterRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusRegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusRegisterRequest}
 */
proto.ConsensusRegisterRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusRegisterRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusRegisterRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusRegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusRegisterRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getVersion();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.ConsensusRegisterRequest.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ConsensusRegisterRequest.prototype.setName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string version = 2;
 * @return {string}
 */
proto.ConsensusRegisterRequest.prototype.getVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.ConsensusRegisterRequest.prototype.setVersion = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusRegisterResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConsensusRegisterResponse.repeatedFields_, null);
};
goog.inherits(proto.ConsensusRegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusRegisterResponse.displayName = 'proto.ConsensusRegisterResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConsensusRegisterResponse.repeatedFields_ = [3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusRegisterResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusRegisterResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusRegisterResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusRegisterResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            chainHead: (f = msg.getChainHead()) && proto.ConsensusBlock.toObject(includeInstance, f),
            peersList: jspb.Message.toObjectList(msg.getPeersList(), proto.ConsensusPeerInfo.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusRegisterResponse}
 */
proto.ConsensusRegisterResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusRegisterResponse;
    return proto.ConsensusRegisterResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusRegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusRegisterResponse}
 */
proto.ConsensusRegisterResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusRegisterResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = new proto.ConsensusBlock;
                reader.readMessage(value, proto.ConsensusBlock.deserializeBinaryFromReader);
                msg.setChainHead(value);
                break;
            case 3:
                var value = new proto.ConsensusPeerInfo;
                reader.readMessage(value, proto.ConsensusPeerInfo.deserializeBinaryFromReader);
                msg.addPeers(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusRegisterResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusRegisterResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusRegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusRegisterResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getChainHead();
    if (f != null) {
        writer.writeMessage(2, f, proto.ConsensusBlock.serializeBinaryToWriter);
    }
    f = message.getPeersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.ConsensusPeerInfo.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusRegisterResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusRegisterResponse.Status}
 */
proto.ConsensusRegisterResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusRegisterResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusRegisterResponse.Status} value */
proto.ConsensusRegisterResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional ConsensusBlock chain_head = 2;
 * @return {?proto.ConsensusBlock}
 */
proto.ConsensusRegisterResponse.prototype.getChainHead = function () {
    return /** @type{?proto.ConsensusBlock} */ (jspb.Message.getWrapperField(this, proto.ConsensusBlock, 2));
};
/** @param {?proto.ConsensusBlock|undefined} value */
proto.ConsensusRegisterResponse.prototype.setChainHead = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
proto.ConsensusRegisterResponse.prototype.clearChainHead = function () {
    this.setChainHead(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConsensusRegisterResponse.prototype.hasChainHead = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * repeated ConsensusPeerInfo peers = 3;
 * @return {!Array<!proto.ConsensusPeerInfo>}
 */
proto.ConsensusRegisterResponse.prototype.getPeersList = function () {
    return /** @type{!Array<!proto.ConsensusPeerInfo>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ConsensusPeerInfo, 3));
};
/** @param {!Array<!proto.ConsensusPeerInfo>} value */
proto.ConsensusRegisterResponse.prototype.setPeersList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.ConsensusPeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConsensusPeerInfo}
 */
proto.ConsensusRegisterResponse.prototype.addPeers = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ConsensusPeerInfo, opt_index);
};
proto.ConsensusRegisterResponse.prototype.clearPeersList = function () {
    this.setPeersList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusNotifyPeerConnected = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusNotifyPeerConnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusNotifyPeerConnected.displayName = 'proto.ConsensusNotifyPeerConnected';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusNotifyPeerConnected.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusNotifyPeerConnected.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusNotifyPeerConnected} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusNotifyPeerConnected.toObject = function (includeInstance, msg) {
        var f, obj = {
            peerInfo: (f = msg.getPeerInfo()) && proto.ConsensusPeerInfo.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusNotifyPeerConnected}
 */
proto.ConsensusNotifyPeerConnected.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusNotifyPeerConnected;
    return proto.ConsensusNotifyPeerConnected.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusNotifyPeerConnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusNotifyPeerConnected}
 */
proto.ConsensusNotifyPeerConnected.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ConsensusPeerInfo;
                reader.readMessage(value, proto.ConsensusPeerInfo.deserializeBinaryFromReader);
                msg.setPeerInfo(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyPeerConnected.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusNotifyPeerConnected.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusNotifyPeerConnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusNotifyPeerConnected.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPeerInfo();
    if (f != null) {
        writer.writeMessage(1, f, proto.ConsensusPeerInfo.serializeBinaryToWriter);
    }
};
/**
 * optional ConsensusPeerInfo peer_info = 1;
 * @return {?proto.ConsensusPeerInfo}
 */
proto.ConsensusNotifyPeerConnected.prototype.getPeerInfo = function () {
    return /** @type{?proto.ConsensusPeerInfo} */ (jspb.Message.getWrapperField(this, proto.ConsensusPeerInfo, 1));
};
/** @param {?proto.ConsensusPeerInfo|undefined} value */
proto.ConsensusNotifyPeerConnected.prototype.setPeerInfo = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.ConsensusNotifyPeerConnected.prototype.clearPeerInfo = function () {
    this.setPeerInfo(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConsensusNotifyPeerConnected.prototype.hasPeerInfo = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusNotifyPeerDisconnected = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusNotifyPeerDisconnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusNotifyPeerDisconnected.displayName = 'proto.ConsensusNotifyPeerDisconnected';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusNotifyPeerDisconnected.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusNotifyPeerDisconnected.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusNotifyPeerDisconnected} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusNotifyPeerDisconnected.toObject = function (includeInstance, msg) {
        var f, obj = {
            peerId: msg.getPeerId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusNotifyPeerDisconnected}
 */
proto.ConsensusNotifyPeerDisconnected.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusNotifyPeerDisconnected;
    return proto.ConsensusNotifyPeerDisconnected.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusNotifyPeerDisconnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusNotifyPeerDisconnected}
 */
proto.ConsensusNotifyPeerDisconnected.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPeerId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyPeerDisconnected.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusNotifyPeerDisconnected.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusNotifyPeerDisconnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusNotifyPeerDisconnected.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPeerId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes peer_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusNotifyPeerDisconnected.prototype.getPeerId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes peer_id = 1;
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {string}
 */
proto.ConsensusNotifyPeerDisconnected.prototype.getPeerId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPeerId()));
};
/**
 * optional bytes peer_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyPeerDisconnected.prototype.getPeerId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPeerId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusNotifyPeerDisconnected.prototype.setPeerId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusNotifyPeerMessage = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusNotifyPeerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusNotifyPeerMessage.displayName = 'proto.ConsensusNotifyPeerMessage';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusNotifyPeerMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusNotifyPeerMessage.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusNotifyPeerMessage} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusNotifyPeerMessage.toObject = function (includeInstance, msg) {
        var f, obj = {
            message: (f = msg.getMessage()) && proto.ConsensusPeerMessage.toObject(includeInstance, f),
            senderId: msg.getSenderId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusNotifyPeerMessage}
 */
proto.ConsensusNotifyPeerMessage.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusNotifyPeerMessage;
    return proto.ConsensusNotifyPeerMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusNotifyPeerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusNotifyPeerMessage}
 */
proto.ConsensusNotifyPeerMessage.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ConsensusPeerMessage;
                reader.readMessage(value, proto.ConsensusPeerMessage.deserializeBinaryFromReader);
                msg.setMessage(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSenderId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyPeerMessage.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusNotifyPeerMessage.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusNotifyPeerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusNotifyPeerMessage.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMessage();
    if (f != null) {
        writer.writeMessage(1, f, proto.ConsensusPeerMessage.serializeBinaryToWriter);
    }
    f = message.getSenderId_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};
/**
 * optional ConsensusPeerMessage message = 1;
 * @return {?proto.ConsensusPeerMessage}
 */
proto.ConsensusNotifyPeerMessage.prototype.getMessage = function () {
    return /** @type{?proto.ConsensusPeerMessage} */ (jspb.Message.getWrapperField(this, proto.ConsensusPeerMessage, 1));
};
/** @param {?proto.ConsensusPeerMessage|undefined} value */
proto.ConsensusNotifyPeerMessage.prototype.setMessage = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.ConsensusNotifyPeerMessage.prototype.clearMessage = function () {
    this.setMessage(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConsensusNotifyPeerMessage.prototype.hasMessage = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional bytes sender_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusNotifyPeerMessage.prototype.getSenderId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes sender_id = 2;
 * This is a type-conversion wrapper around `getSenderId()`
 * @return {string}
 */
proto.ConsensusNotifyPeerMessage.prototype.getSenderId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSenderId()));
};
/**
 * optional bytes sender_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderId()`
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyPeerMessage.prototype.getSenderId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSenderId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusNotifyPeerMessage.prototype.setSenderId = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusNotifyBlockNew = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusNotifyBlockNew, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusNotifyBlockNew.displayName = 'proto.ConsensusNotifyBlockNew';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusNotifyBlockNew.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusNotifyBlockNew.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusNotifyBlockNew} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusNotifyBlockNew.toObject = function (includeInstance, msg) {
        var f, obj = {
            block: (f = msg.getBlock()) && proto.ConsensusBlock.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusNotifyBlockNew}
 */
proto.ConsensusNotifyBlockNew.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusNotifyBlockNew;
    return proto.ConsensusNotifyBlockNew.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusNotifyBlockNew} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusNotifyBlockNew}
 */
proto.ConsensusNotifyBlockNew.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ConsensusBlock;
                reader.readMessage(value, proto.ConsensusBlock.deserializeBinaryFromReader);
                msg.setBlock(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyBlockNew.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusNotifyBlockNew.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusNotifyBlockNew} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusNotifyBlockNew.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlock();
    if (f != null) {
        writer.writeMessage(1, f, proto.ConsensusBlock.serializeBinaryToWriter);
    }
};
/**
 * optional ConsensusBlock block = 1;
 * @return {?proto.ConsensusBlock}
 */
proto.ConsensusNotifyBlockNew.prototype.getBlock = function () {
    return /** @type{?proto.ConsensusBlock} */ (jspb.Message.getWrapperField(this, proto.ConsensusBlock, 1));
};
/** @param {?proto.ConsensusBlock|undefined} value */
proto.ConsensusNotifyBlockNew.prototype.setBlock = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.ConsensusNotifyBlockNew.prototype.clearBlock = function () {
    this.setBlock(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConsensusNotifyBlockNew.prototype.hasBlock = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusNotifyBlockValid = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusNotifyBlockValid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusNotifyBlockValid.displayName = 'proto.ConsensusNotifyBlockValid';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusNotifyBlockValid.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusNotifyBlockValid.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusNotifyBlockValid} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusNotifyBlockValid.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusNotifyBlockValid}
 */
proto.ConsensusNotifyBlockValid.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusNotifyBlockValid;
    return proto.ConsensusNotifyBlockValid.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusNotifyBlockValid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusNotifyBlockValid}
 */
proto.ConsensusNotifyBlockValid.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyBlockValid.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusNotifyBlockValid.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusNotifyBlockValid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusNotifyBlockValid.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusNotifyBlockValid.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusNotifyBlockValid.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyBlockValid.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusNotifyBlockValid.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusNotifyBlockInvalid = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusNotifyBlockInvalid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusNotifyBlockInvalid.displayName = 'proto.ConsensusNotifyBlockInvalid';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusNotifyBlockInvalid.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusNotifyBlockInvalid.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusNotifyBlockInvalid} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusNotifyBlockInvalid.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusNotifyBlockInvalid}
 */
proto.ConsensusNotifyBlockInvalid.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusNotifyBlockInvalid;
    return proto.ConsensusNotifyBlockInvalid.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusNotifyBlockInvalid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusNotifyBlockInvalid}
 */
proto.ConsensusNotifyBlockInvalid.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyBlockInvalid.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusNotifyBlockInvalid.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusNotifyBlockInvalid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusNotifyBlockInvalid.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusNotifyBlockInvalid.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusNotifyBlockInvalid.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyBlockInvalid.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusNotifyBlockInvalid.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusNotifyBlockCommit = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusNotifyBlockCommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusNotifyBlockCommit.displayName = 'proto.ConsensusNotifyBlockCommit';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusNotifyBlockCommit.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusNotifyBlockCommit.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusNotifyBlockCommit} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusNotifyBlockCommit.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusNotifyBlockCommit}
 */
proto.ConsensusNotifyBlockCommit.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusNotifyBlockCommit;
    return proto.ConsensusNotifyBlockCommit.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusNotifyBlockCommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusNotifyBlockCommit}
 */
proto.ConsensusNotifyBlockCommit.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyBlockCommit.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusNotifyBlockCommit.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusNotifyBlockCommit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusNotifyBlockCommit.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusNotifyBlockCommit.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusNotifyBlockCommit.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyBlockCommit.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusNotifyBlockCommit.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusNotifyAck = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusNotifyAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusNotifyAck.displayName = 'proto.ConsensusNotifyAck';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusNotifyAck.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusNotifyAck.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusNotifyAck} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusNotifyAck.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusNotifyAck}
 */
proto.ConsensusNotifyAck.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusNotifyAck;
    return proto.ConsensusNotifyAck.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusNotifyAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusNotifyAck}
 */
proto.ConsensusNotifyAck.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusNotifyAck.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusNotifyAck.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusNotifyAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusNotifyAck.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusSendToRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusSendToRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusSendToRequest.displayName = 'proto.ConsensusSendToRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusSendToRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusSendToRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusSendToRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusSendToRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            message: (f = msg.getMessage()) && proto.ConsensusPeerMessage.toObject(includeInstance, f),
            peerId: msg.getPeerId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusSendToRequest}
 */
proto.ConsensusSendToRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusSendToRequest;
    return proto.ConsensusSendToRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusSendToRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusSendToRequest}
 */
proto.ConsensusSendToRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ConsensusPeerMessage;
                reader.readMessage(value, proto.ConsensusPeerMessage.deserializeBinaryFromReader);
                msg.setMessage(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPeerId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusSendToRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusSendToRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusSendToRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusSendToRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMessage();
    if (f != null) {
        writer.writeMessage(1, f, proto.ConsensusPeerMessage.serializeBinaryToWriter);
    }
    f = message.getPeerId_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};
/**
 * optional ConsensusPeerMessage message = 1;
 * @return {?proto.ConsensusPeerMessage}
 */
proto.ConsensusSendToRequest.prototype.getMessage = function () {
    return /** @type{?proto.ConsensusPeerMessage} */ (jspb.Message.getWrapperField(this, proto.ConsensusPeerMessage, 1));
};
/** @param {?proto.ConsensusPeerMessage|undefined} value */
proto.ConsensusSendToRequest.prototype.setMessage = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.ConsensusSendToRequest.prototype.clearMessage = function () {
    this.setMessage(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConsensusSendToRequest.prototype.hasMessage = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional bytes peer_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusSendToRequest.prototype.getPeerId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes peer_id = 2;
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {string}
 */
proto.ConsensusSendToRequest.prototype.getPeerId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPeerId()));
};
/**
 * optional bytes peer_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {!Uint8Array}
 */
proto.ConsensusSendToRequest.prototype.getPeerId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPeerId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusSendToRequest.prototype.setPeerId = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusSendToResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusSendToResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusSendToResponse.displayName = 'proto.ConsensusSendToResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusSendToResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusSendToResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusSendToResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusSendToResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusSendToResponse}
 */
proto.ConsensusSendToResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusSendToResponse;
    return proto.ConsensusSendToResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusSendToResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusSendToResponse}
 */
proto.ConsensusSendToResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusSendToResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusSendToResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusSendToResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusSendToResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusSendToResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusSendToResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    UNKNOWN_PEER: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusSendToResponse.Status}
 */
proto.ConsensusSendToResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusSendToResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusSendToResponse.Status} value */
proto.ConsensusSendToResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusBroadcastRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusBroadcastRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusBroadcastRequest.displayName = 'proto.ConsensusBroadcastRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusBroadcastRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusBroadcastRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusBroadcastRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusBroadcastRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            message: (f = msg.getMessage()) && proto.ConsensusPeerMessage.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusBroadcastRequest}
 */
proto.ConsensusBroadcastRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusBroadcastRequest;
    return proto.ConsensusBroadcastRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusBroadcastRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusBroadcastRequest}
 */
proto.ConsensusBroadcastRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ConsensusPeerMessage;
                reader.readMessage(value, proto.ConsensusPeerMessage.deserializeBinaryFromReader);
                msg.setMessage(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusBroadcastRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusBroadcastRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusBroadcastRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusBroadcastRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMessage();
    if (f != null) {
        writer.writeMessage(1, f, proto.ConsensusPeerMessage.serializeBinaryToWriter);
    }
};
/**
 * optional ConsensusPeerMessage message = 1;
 * @return {?proto.ConsensusPeerMessage}
 */
proto.ConsensusBroadcastRequest.prototype.getMessage = function () {
    return /** @type{?proto.ConsensusPeerMessage} */ (jspb.Message.getWrapperField(this, proto.ConsensusPeerMessage, 1));
};
/** @param {?proto.ConsensusPeerMessage|undefined} value */
proto.ConsensusBroadcastRequest.prototype.setMessage = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.ConsensusBroadcastRequest.prototype.clearMessage = function () {
    this.setMessage(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConsensusBroadcastRequest.prototype.hasMessage = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusBroadcastResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusBroadcastResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusBroadcastResponse.displayName = 'proto.ConsensusBroadcastResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusBroadcastResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusBroadcastResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusBroadcastResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusBroadcastResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusBroadcastResponse}
 */
proto.ConsensusBroadcastResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusBroadcastResponse;
    return proto.ConsensusBroadcastResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusBroadcastResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusBroadcastResponse}
 */
proto.ConsensusBroadcastResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusBroadcastResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusBroadcastResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusBroadcastResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusBroadcastResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusBroadcastResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusBroadcastResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusBroadcastResponse.Status}
 */
proto.ConsensusBroadcastResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusBroadcastResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusBroadcastResponse.Status} value */
proto.ConsensusBroadcastResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusInitializeBlockRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusInitializeBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusInitializeBlockRequest.displayName = 'proto.ConsensusInitializeBlockRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusInitializeBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusInitializeBlockRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusInitializeBlockRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusInitializeBlockRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            previousId: msg.getPreviousId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusInitializeBlockRequest}
 */
proto.ConsensusInitializeBlockRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusInitializeBlockRequest;
    return proto.ConsensusInitializeBlockRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusInitializeBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusInitializeBlockRequest}
 */
proto.ConsensusInitializeBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPreviousId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusInitializeBlockRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusInitializeBlockRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusInitializeBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusInitializeBlockRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPreviousId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes previous_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusInitializeBlockRequest.prototype.getPreviousId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes previous_id = 1;
 * This is a type-conversion wrapper around `getPreviousId()`
 * @return {string}
 */
proto.ConsensusInitializeBlockRequest.prototype.getPreviousId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPreviousId()));
};
/**
 * optional bytes previous_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousId()`
 * @return {!Uint8Array}
 */
proto.ConsensusInitializeBlockRequest.prototype.getPreviousId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPreviousId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusInitializeBlockRequest.prototype.setPreviousId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusInitializeBlockResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusInitializeBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusInitializeBlockResponse.displayName = 'proto.ConsensusInitializeBlockResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusInitializeBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusInitializeBlockResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusInitializeBlockResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusInitializeBlockResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusInitializeBlockResponse}
 */
proto.ConsensusInitializeBlockResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusInitializeBlockResponse;
    return proto.ConsensusInitializeBlockResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusInitializeBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusInitializeBlockResponse}
 */
proto.ConsensusInitializeBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusInitializeBlockResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusInitializeBlockResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusInitializeBlockResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusInitializeBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusInitializeBlockResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusInitializeBlockResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    INVALID_STATE: 5,
    UNKNOWN_BLOCK: 6
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusInitializeBlockResponse.Status}
 */
proto.ConsensusInitializeBlockResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusInitializeBlockResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusInitializeBlockResponse.Status} value */
proto.ConsensusInitializeBlockResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusSummarizeBlockRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusSummarizeBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusSummarizeBlockRequest.displayName = 'proto.ConsensusSummarizeBlockRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusSummarizeBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusSummarizeBlockRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusSummarizeBlockRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusSummarizeBlockRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusSummarizeBlockRequest}
 */
proto.ConsensusSummarizeBlockRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusSummarizeBlockRequest;
    return proto.ConsensusSummarizeBlockRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusSummarizeBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusSummarizeBlockRequest}
 */
proto.ConsensusSummarizeBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusSummarizeBlockRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusSummarizeBlockRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusSummarizeBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusSummarizeBlockRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusSummarizeBlockResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusSummarizeBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusSummarizeBlockResponse.displayName = 'proto.ConsensusSummarizeBlockResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusSummarizeBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusSummarizeBlockResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusSummarizeBlockResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusSummarizeBlockResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            summary: msg.getSummary_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusSummarizeBlockResponse}
 */
proto.ConsensusSummarizeBlockResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusSummarizeBlockResponse;
    return proto.ConsensusSummarizeBlockResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusSummarizeBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusSummarizeBlockResponse}
 */
proto.ConsensusSummarizeBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusSummarizeBlockResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSummary(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusSummarizeBlockResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusSummarizeBlockResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusSummarizeBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusSummarizeBlockResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getSummary_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusSummarizeBlockResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    INVALID_STATE: 5,
    BLOCK_NOT_READY: 6
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusSummarizeBlockResponse.Status}
 */
proto.ConsensusSummarizeBlockResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusSummarizeBlockResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusSummarizeBlockResponse.Status} value */
proto.ConsensusSummarizeBlockResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional bytes summary = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusSummarizeBlockResponse.prototype.getSummary = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes summary = 2;
 * This is a type-conversion wrapper around `getSummary()`
 * @return {string}
 */
proto.ConsensusSummarizeBlockResponse.prototype.getSummary_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSummary()));
};
/**
 * optional bytes summary = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSummary()`
 * @return {!Uint8Array}
 */
proto.ConsensusSummarizeBlockResponse.prototype.getSummary_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSummary()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusSummarizeBlockResponse.prototype.setSummary = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusFinalizeBlockRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusFinalizeBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusFinalizeBlockRequest.displayName = 'proto.ConsensusFinalizeBlockRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusFinalizeBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusFinalizeBlockRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusFinalizeBlockRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusFinalizeBlockRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            data: msg.getData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusFinalizeBlockRequest}
 */
proto.ConsensusFinalizeBlockRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusFinalizeBlockRequest;
    return proto.ConsensusFinalizeBlockRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusFinalizeBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusFinalizeBlockRequest}
 */
proto.ConsensusFinalizeBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusFinalizeBlockRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusFinalizeBlockRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusFinalizeBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusFinalizeBlockRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusFinalizeBlockRequest.prototype.getData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.ConsensusFinalizeBlockRequest.prototype.getData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};
/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.ConsensusFinalizeBlockRequest.prototype.getData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusFinalizeBlockRequest.prototype.setData = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusFinalizeBlockResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusFinalizeBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusFinalizeBlockResponse.displayName = 'proto.ConsensusFinalizeBlockResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusFinalizeBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusFinalizeBlockResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusFinalizeBlockResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusFinalizeBlockResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            blockId: msg.getBlockId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusFinalizeBlockResponse}
 */
proto.ConsensusFinalizeBlockResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusFinalizeBlockResponse;
    return proto.ConsensusFinalizeBlockResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusFinalizeBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusFinalizeBlockResponse}
 */
proto.ConsensusFinalizeBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusFinalizeBlockResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusFinalizeBlockResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusFinalizeBlockResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusFinalizeBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusFinalizeBlockResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusFinalizeBlockResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    INVALID_STATE: 5,
    BLOCK_NOT_READY: 6
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusFinalizeBlockResponse.Status}
 */
proto.ConsensusFinalizeBlockResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusFinalizeBlockResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusFinalizeBlockResponse.Status} value */
proto.ConsensusFinalizeBlockResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional bytes block_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusFinalizeBlockResponse.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes block_id = 2;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusFinalizeBlockResponse.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusFinalizeBlockResponse.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusFinalizeBlockResponse.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusCancelBlockRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusCancelBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusCancelBlockRequest.displayName = 'proto.ConsensusCancelBlockRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusCancelBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusCancelBlockRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusCancelBlockRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusCancelBlockRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusCancelBlockRequest}
 */
proto.ConsensusCancelBlockRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusCancelBlockRequest;
    return proto.ConsensusCancelBlockRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusCancelBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusCancelBlockRequest}
 */
proto.ConsensusCancelBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusCancelBlockRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusCancelBlockRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusCancelBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusCancelBlockRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusCancelBlockResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusCancelBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusCancelBlockResponse.displayName = 'proto.ConsensusCancelBlockResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusCancelBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusCancelBlockResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusCancelBlockResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusCancelBlockResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusCancelBlockResponse}
 */
proto.ConsensusCancelBlockResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusCancelBlockResponse;
    return proto.ConsensusCancelBlockResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusCancelBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusCancelBlockResponse}
 */
proto.ConsensusCancelBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusCancelBlockResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusCancelBlockResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusCancelBlockResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusCancelBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusCancelBlockResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusCancelBlockResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    INVALID_STATE: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusCancelBlockResponse.Status}
 */
proto.ConsensusCancelBlockResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusCancelBlockResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusCancelBlockResponse.Status} value */
proto.ConsensusCancelBlockResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusCheckBlocksRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConsensusCheckBlocksRequest.repeatedFields_, null);
};
goog.inherits(proto.ConsensusCheckBlocksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusCheckBlocksRequest.displayName = 'proto.ConsensusCheckBlocksRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConsensusCheckBlocksRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusCheckBlocksRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusCheckBlocksRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusCheckBlocksRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusCheckBlocksRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockIdsList: msg.getBlockIdsList_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusCheckBlocksRequest}
 */
proto.ConsensusCheckBlocksRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusCheckBlocksRequest;
    return proto.ConsensusCheckBlocksRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusCheckBlocksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusCheckBlocksRequest}
 */
proto.ConsensusCheckBlocksRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addBlockIds(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusCheckBlocksRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusCheckBlocksRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusCheckBlocksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusCheckBlocksRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockIdsList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
    }
};
/**
 * repeated bytes block_ids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ConsensusCheckBlocksRequest.prototype.getBlockIdsList = function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};
/**
 * repeated bytes block_ids = 1;
 * This is a type-conversion wrapper around `getBlockIdsList()`
 * @return {!Array<string>}
 */
proto.ConsensusCheckBlocksRequest.prototype.getBlockIdsList_asB64 = function () {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getBlockIdsList()));
};
/**
 * repeated bytes block_ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ConsensusCheckBlocksRequest.prototype.getBlockIdsList_asU8 = function () {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(this.getBlockIdsList()));
};
/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ConsensusCheckBlocksRequest.prototype.setBlockIdsList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ConsensusCheckBlocksRequest.prototype.addBlockIds = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.ConsensusCheckBlocksRequest.prototype.clearBlockIdsList = function () {
    this.setBlockIdsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusCheckBlocksResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusCheckBlocksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusCheckBlocksResponse.displayName = 'proto.ConsensusCheckBlocksResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusCheckBlocksResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusCheckBlocksResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusCheckBlocksResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusCheckBlocksResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusCheckBlocksResponse}
 */
proto.ConsensusCheckBlocksResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusCheckBlocksResponse;
    return proto.ConsensusCheckBlocksResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusCheckBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusCheckBlocksResponse}
 */
proto.ConsensusCheckBlocksResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusCheckBlocksResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusCheckBlocksResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusCheckBlocksResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusCheckBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusCheckBlocksResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusCheckBlocksResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    UNKNOWN_BLOCK: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusCheckBlocksResponse.Status}
 */
proto.ConsensusCheckBlocksResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusCheckBlocksResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusCheckBlocksResponse.Status} value */
proto.ConsensusCheckBlocksResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusCommitBlockRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusCommitBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusCommitBlockRequest.displayName = 'proto.ConsensusCommitBlockRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusCommitBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusCommitBlockRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusCommitBlockRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusCommitBlockRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusCommitBlockRequest}
 */
proto.ConsensusCommitBlockRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusCommitBlockRequest;
    return proto.ConsensusCommitBlockRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusCommitBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusCommitBlockRequest}
 */
proto.ConsensusCommitBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusCommitBlockRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusCommitBlockRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusCommitBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusCommitBlockRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusCommitBlockRequest.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusCommitBlockRequest.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusCommitBlockRequest.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusCommitBlockRequest.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusCommitBlockResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusCommitBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusCommitBlockResponse.displayName = 'proto.ConsensusCommitBlockResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusCommitBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusCommitBlockResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusCommitBlockResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusCommitBlockResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusCommitBlockResponse}
 */
proto.ConsensusCommitBlockResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusCommitBlockResponse;
    return proto.ConsensusCommitBlockResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusCommitBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusCommitBlockResponse}
 */
proto.ConsensusCommitBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusCommitBlockResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusCommitBlockResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusCommitBlockResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusCommitBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusCommitBlockResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusCommitBlockResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    UNKNOWN_BLOCK: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusCommitBlockResponse.Status}
 */
proto.ConsensusCommitBlockResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusCommitBlockResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusCommitBlockResponse.Status} value */
proto.ConsensusCommitBlockResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusIgnoreBlockRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusIgnoreBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusIgnoreBlockRequest.displayName = 'proto.ConsensusIgnoreBlockRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusIgnoreBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusIgnoreBlockRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusIgnoreBlockRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusIgnoreBlockRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusIgnoreBlockRequest}
 */
proto.ConsensusIgnoreBlockRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusIgnoreBlockRequest;
    return proto.ConsensusIgnoreBlockRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusIgnoreBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusIgnoreBlockRequest}
 */
proto.ConsensusIgnoreBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusIgnoreBlockRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusIgnoreBlockRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusIgnoreBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusIgnoreBlockRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusIgnoreBlockRequest.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusIgnoreBlockRequest.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusIgnoreBlockRequest.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusIgnoreBlockRequest.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusIgnoreBlockResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusIgnoreBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusIgnoreBlockResponse.displayName = 'proto.ConsensusIgnoreBlockResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusIgnoreBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusIgnoreBlockResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusIgnoreBlockResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusIgnoreBlockResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusIgnoreBlockResponse}
 */
proto.ConsensusIgnoreBlockResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusIgnoreBlockResponse;
    return proto.ConsensusIgnoreBlockResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusIgnoreBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusIgnoreBlockResponse}
 */
proto.ConsensusIgnoreBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusIgnoreBlockResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusIgnoreBlockResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusIgnoreBlockResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusIgnoreBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusIgnoreBlockResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusIgnoreBlockResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    UNKNOWN_BLOCK: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusIgnoreBlockResponse.Status}
 */
proto.ConsensusIgnoreBlockResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusIgnoreBlockResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusIgnoreBlockResponse.Status} value */
proto.ConsensusIgnoreBlockResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusFailBlockRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusFailBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusFailBlockRequest.displayName = 'proto.ConsensusFailBlockRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusFailBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusFailBlockRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusFailBlockRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusFailBlockRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusFailBlockRequest}
 */
proto.ConsensusFailBlockRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusFailBlockRequest;
    return proto.ConsensusFailBlockRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusFailBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusFailBlockRequest}
 */
proto.ConsensusFailBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusFailBlockRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusFailBlockRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusFailBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusFailBlockRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusFailBlockRequest.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusFailBlockRequest.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusFailBlockRequest.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusFailBlockRequest.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusFailBlockResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusFailBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusFailBlockResponse.displayName = 'proto.ConsensusFailBlockResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusFailBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusFailBlockResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusFailBlockResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusFailBlockResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusFailBlockResponse}
 */
proto.ConsensusFailBlockResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusFailBlockResponse;
    return proto.ConsensusFailBlockResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusFailBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusFailBlockResponse}
 */
proto.ConsensusFailBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusFailBlockResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusFailBlockResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusFailBlockResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusFailBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusFailBlockResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusFailBlockResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    UNKNOWN_BLOCK: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusFailBlockResponse.Status}
 */
proto.ConsensusFailBlockResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusFailBlockResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusFailBlockResponse.Status} value */
proto.ConsensusFailBlockResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusBlocksGetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConsensusBlocksGetRequest.repeatedFields_, null);
};
goog.inherits(proto.ConsensusBlocksGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusBlocksGetRequest.displayName = 'proto.ConsensusBlocksGetRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConsensusBlocksGetRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusBlocksGetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusBlocksGetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusBlocksGetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusBlocksGetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockIdsList: msg.getBlockIdsList_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusBlocksGetRequest}
 */
proto.ConsensusBlocksGetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusBlocksGetRequest;
    return proto.ConsensusBlocksGetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusBlocksGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusBlocksGetRequest}
 */
proto.ConsensusBlocksGetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addBlockIds(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusBlocksGetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusBlocksGetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusBlocksGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusBlocksGetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockIdsList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
    }
};
/**
 * repeated bytes block_ids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ConsensusBlocksGetRequest.prototype.getBlockIdsList = function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};
/**
 * repeated bytes block_ids = 1;
 * This is a type-conversion wrapper around `getBlockIdsList()`
 * @return {!Array<string>}
 */
proto.ConsensusBlocksGetRequest.prototype.getBlockIdsList_asB64 = function () {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getBlockIdsList()));
};
/**
 * repeated bytes block_ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ConsensusBlocksGetRequest.prototype.getBlockIdsList_asU8 = function () {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(this.getBlockIdsList()));
};
/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ConsensusBlocksGetRequest.prototype.setBlockIdsList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ConsensusBlocksGetRequest.prototype.addBlockIds = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.ConsensusBlocksGetRequest.prototype.clearBlockIdsList = function () {
    this.setBlockIdsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusBlocksGetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConsensusBlocksGetResponse.repeatedFields_, null);
};
goog.inherits(proto.ConsensusBlocksGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusBlocksGetResponse.displayName = 'proto.ConsensusBlocksGetResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConsensusBlocksGetResponse.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusBlocksGetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusBlocksGetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusBlocksGetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusBlocksGetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            blocksList: jspb.Message.toObjectList(msg.getBlocksList(), proto.ConsensusBlock.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusBlocksGetResponse}
 */
proto.ConsensusBlocksGetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusBlocksGetResponse;
    return proto.ConsensusBlocksGetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusBlocksGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusBlocksGetResponse}
 */
proto.ConsensusBlocksGetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusBlocksGetResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = new proto.ConsensusBlock;
                reader.readMessage(value, proto.ConsensusBlock.deserializeBinaryFromReader);
                msg.addBlocks(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusBlocksGetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusBlocksGetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusBlocksGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusBlocksGetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getBlocksList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.ConsensusBlock.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusBlocksGetResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    UNKNOWN_BLOCK: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusBlocksGetResponse.Status}
 */
proto.ConsensusBlocksGetResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusBlocksGetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusBlocksGetResponse.Status} value */
proto.ConsensusBlocksGetResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * repeated ConsensusBlock blocks = 2;
 * @return {!Array<!proto.ConsensusBlock>}
 */
proto.ConsensusBlocksGetResponse.prototype.getBlocksList = function () {
    return /** @type{!Array<!proto.ConsensusBlock>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ConsensusBlock, 2));
};
/** @param {!Array<!proto.ConsensusBlock>} value */
proto.ConsensusBlocksGetResponse.prototype.setBlocksList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.ConsensusBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConsensusBlock}
 */
proto.ConsensusBlocksGetResponse.prototype.addBlocks = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ConsensusBlock, opt_index);
};
proto.ConsensusBlocksGetResponse.prototype.clearBlocksList = function () {
    this.setBlocksList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusChainHeadGetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusChainHeadGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusChainHeadGetRequest.displayName = 'proto.ConsensusChainHeadGetRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusChainHeadGetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusChainHeadGetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusChainHeadGetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusChainHeadGetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusChainHeadGetRequest}
 */
proto.ConsensusChainHeadGetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusChainHeadGetRequest;
    return proto.ConsensusChainHeadGetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusChainHeadGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusChainHeadGetRequest}
 */
proto.ConsensusChainHeadGetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusChainHeadGetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusChainHeadGetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusChainHeadGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusChainHeadGetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusChainHeadGetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConsensusChainHeadGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusChainHeadGetResponse.displayName = 'proto.ConsensusChainHeadGetResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusChainHeadGetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusChainHeadGetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusChainHeadGetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusChainHeadGetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            block: (f = msg.getBlock()) && proto.ConsensusBlock.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusChainHeadGetResponse}
 */
proto.ConsensusChainHeadGetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusChainHeadGetResponse;
    return proto.ConsensusChainHeadGetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusChainHeadGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusChainHeadGetResponse}
 */
proto.ConsensusChainHeadGetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusChainHeadGetResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = new proto.ConsensusBlock;
                reader.readMessage(value, proto.ConsensusBlock.deserializeBinaryFromReader);
                msg.setBlock(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusChainHeadGetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusChainHeadGetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusChainHeadGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusChainHeadGetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getBlock();
    if (f != null) {
        writer.writeMessage(2, f, proto.ConsensusBlock.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusChainHeadGetResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    NO_CHAIN_HEAD: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusChainHeadGetResponse.Status}
 */
proto.ConsensusChainHeadGetResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusChainHeadGetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusChainHeadGetResponse.Status} value */
proto.ConsensusChainHeadGetResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional ConsensusBlock block = 2;
 * @return {?proto.ConsensusBlock}
 */
proto.ConsensusChainHeadGetResponse.prototype.getBlock = function () {
    return /** @type{?proto.ConsensusBlock} */ (jspb.Message.getWrapperField(this, proto.ConsensusBlock, 2));
};
/** @param {?proto.ConsensusBlock|undefined} value */
proto.ConsensusChainHeadGetResponse.prototype.setBlock = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
proto.ConsensusChainHeadGetResponse.prototype.clearBlock = function () {
    this.setBlock(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ConsensusChainHeadGetResponse.prototype.hasBlock = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusSettingsGetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConsensusSettingsGetRequest.repeatedFields_, null);
};
goog.inherits(proto.ConsensusSettingsGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusSettingsGetRequest.displayName = 'proto.ConsensusSettingsGetRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConsensusSettingsGetRequest.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusSettingsGetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusSettingsGetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusSettingsGetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusSettingsGetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64(),
            keysList: jspb.Message.getRepeatedField(msg, 2)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusSettingsGetRequest}
 */
proto.ConsensusSettingsGetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusSettingsGetRequest;
    return proto.ConsensusSettingsGetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusSettingsGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusSettingsGetRequest}
 */
proto.ConsensusSettingsGetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.addKeys(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusSettingsGetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusSettingsGetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusSettingsGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusSettingsGetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getKeysList();
    if (f.length > 0) {
        writer.writeRepeatedString(2, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusSettingsGetRequest.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusSettingsGetRequest.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusSettingsGetRequest.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusSettingsGetRequest.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * repeated string keys = 2;
 * @return {!Array<string>}
 */
proto.ConsensusSettingsGetRequest.prototype.getKeysList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};
/** @param {!Array<string>} value */
proto.ConsensusSettingsGetRequest.prototype.setKeysList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ConsensusSettingsGetRequest.prototype.addKeys = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.ConsensusSettingsGetRequest.prototype.clearKeysList = function () {
    this.setKeysList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusSettingsGetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConsensusSettingsGetResponse.repeatedFields_, null);
};
goog.inherits(proto.ConsensusSettingsGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusSettingsGetResponse.displayName = 'proto.ConsensusSettingsGetResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConsensusSettingsGetResponse.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusSettingsGetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusSettingsGetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusSettingsGetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusSettingsGetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            entriesList: jspb.Message.toObjectList(msg.getEntriesList(), proto.ConsensusSettingsEntry.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusSettingsGetResponse}
 */
proto.ConsensusSettingsGetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusSettingsGetResponse;
    return proto.ConsensusSettingsGetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusSettingsGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusSettingsGetResponse}
 */
proto.ConsensusSettingsGetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusSettingsGetResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = new proto.ConsensusSettingsEntry;
                reader.readMessage(value, proto.ConsensusSettingsEntry.deserializeBinaryFromReader);
                msg.addEntries(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusSettingsGetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusSettingsGetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusSettingsGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusSettingsGetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getEntriesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.ConsensusSettingsEntry.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusSettingsGetResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    UNKNOWN_BLOCK: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusSettingsGetResponse.Status}
 */
proto.ConsensusSettingsGetResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusSettingsGetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusSettingsGetResponse.Status} value */
proto.ConsensusSettingsGetResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * repeated ConsensusSettingsEntry entries = 2;
 * @return {!Array<!proto.ConsensusSettingsEntry>}
 */
proto.ConsensusSettingsGetResponse.prototype.getEntriesList = function () {
    return /** @type{!Array<!proto.ConsensusSettingsEntry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ConsensusSettingsEntry, 2));
};
/** @param {!Array<!proto.ConsensusSettingsEntry>} value */
proto.ConsensusSettingsGetResponse.prototype.setEntriesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.ConsensusSettingsEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConsensusSettingsEntry}
 */
proto.ConsensusSettingsGetResponse.prototype.addEntries = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ConsensusSettingsEntry, opt_index);
};
proto.ConsensusSettingsGetResponse.prototype.clearEntriesList = function () {
    this.setEntriesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusStateGetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConsensusStateGetRequest.repeatedFields_, null);
};
goog.inherits(proto.ConsensusStateGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusStateGetRequest.displayName = 'proto.ConsensusStateGetRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConsensusStateGetRequest.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusStateGetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusStateGetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusStateGetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusStateGetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            blockId: msg.getBlockId_asB64(),
            addressesList: jspb.Message.getRepeatedField(msg, 2)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusStateGetRequest}
 */
proto.ConsensusStateGetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusStateGetRequest;
    return proto.ConsensusStateGetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusStateGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusStateGetRequest}
 */
proto.ConsensusStateGetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setBlockId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.addAddresses(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusStateGetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusStateGetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusStateGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusStateGetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockId_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(2, f);
    }
};
/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ConsensusStateGetRequest.prototype.getBlockId = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.ConsensusStateGetRequest.prototype.getBlockId_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockId()));
};
/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.ConsensusStateGetRequest.prototype.getBlockId_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockId()));
};
/** @param {!(string|Uint8Array)} value */
proto.ConsensusStateGetRequest.prototype.setBlockId = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * repeated string addresses = 2;
 * @return {!Array<string>}
 */
proto.ConsensusStateGetRequest.prototype.getAddressesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};
/** @param {!Array<string>} value */
proto.ConsensusStateGetRequest.prototype.setAddressesList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ConsensusStateGetRequest.prototype.addAddresses = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.ConsensusStateGetRequest.prototype.clearAddressesList = function () {
    this.setAddressesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConsensusStateGetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConsensusStateGetResponse.repeatedFields_, null);
};
goog.inherits(proto.ConsensusStateGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConsensusStateGetResponse.displayName = 'proto.ConsensusStateGetResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConsensusStateGetResponse.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConsensusStateGetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConsensusStateGetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConsensusStateGetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConsensusStateGetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            entriesList: jspb.Message.toObjectList(msg.getEntriesList(), proto.ConsensusStateEntry.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConsensusStateGetResponse}
 */
proto.ConsensusStateGetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConsensusStateGetResponse;
    return proto.ConsensusStateGetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConsensusStateGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConsensusStateGetResponse}
 */
proto.ConsensusStateGetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ConsensusStateGetResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = new proto.ConsensusStateEntry;
                reader.readMessage(value, proto.ConsensusStateEntry.deserializeBinaryFromReader);
                msg.addEntries(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConsensusStateGetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConsensusStateGetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConsensusStateGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConsensusStateGetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getEntriesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.ConsensusStateEntry.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ConsensusStateGetResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    BAD_REQUEST: 2,
    SERVICE_ERROR: 3,
    NOT_READY: 4,
    UNKNOWN_BLOCK: 5
};
/**
 * optional Status status = 1;
 * @return {!proto.ConsensusStateGetResponse.Status}
 */
proto.ConsensusStateGetResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConsensusStateGetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ConsensusStateGetResponse.Status} value */
proto.ConsensusStateGetResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * repeated ConsensusStateEntry entries = 2;
 * @return {!Array<!proto.ConsensusStateEntry>}
 */
proto.ConsensusStateGetResponse.prototype.getEntriesList = function () {
    return /** @type{!Array<!proto.ConsensusStateEntry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ConsensusStateEntry, 2));
};
/** @param {!Array<!proto.ConsensusStateEntry>} value */
proto.ConsensusStateGetResponse.prototype.setEntriesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.ConsensusStateEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConsensusStateEntry}
 */
proto.ConsensusStateGetResponse.prototype.addEntries = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ConsensusStateEntry, opt_index);
};
proto.ConsensusStateGetResponse.prototype.clearEntriesList = function () {
    this.setEntriesList([]);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,