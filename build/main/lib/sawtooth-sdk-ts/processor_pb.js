/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var transaction_pb = require('./transaction_pb.js');
goog.exportSymbol('proto.TpProcessRequest', null, global);
goog.exportSymbol('proto.TpProcessResponse', null, global);
goog.exportSymbol('proto.TpProcessResponse.Status', null, global);
goog.exportSymbol('proto.TpRegisterRequest', null, global);
goog.exportSymbol('proto.TpRegisterResponse', null, global);
goog.exportSymbol('proto.TpRegisterResponse.Status', null, global);
goog.exportSymbol('proto.TpUnregisterRequest', null, global);
goog.exportSymbol('proto.TpUnregisterResponse', null, global);
goog.exportSymbol('proto.TpUnregisterResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpRegisterRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TpRegisterRequest.repeatedFields_, null);
};
goog.inherits(proto.TpRegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpRegisterRequest.displayName = 'proto.TpRegisterRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TpRegisterRequest.repeatedFields_ = [4];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpRegisterRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.TpRegisterRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpRegisterRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpRegisterRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            family: jspb.Message.getFieldWithDefault(msg, 1, ""),
            version: jspb.Message.getFieldWithDefault(msg, 2, ""),
            namespacesList: jspb.Message.getRepeatedField(msg, 4),
            maxOccupancy: jspb.Message.getFieldWithDefault(msg, 5, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpRegisterRequest}
 */
proto.TpRegisterRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpRegisterRequest;
    return proto.TpRegisterRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpRegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpRegisterRequest}
 */
proto.TpRegisterRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFamily(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setVersion(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.addNamespaces(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setMaxOccupancy(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpRegisterRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpRegisterRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpRegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpRegisterRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFamily();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getVersion();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getNamespacesList();
    if (f.length > 0) {
        writer.writeRepeatedString(4, f);
    }
    f = message.getMaxOccupancy();
    if (f !== 0) {
        writer.writeUint32(5, f);
    }
};
/**
 * optional string family = 1;
 * @return {string}
 */
proto.TpRegisterRequest.prototype.getFamily = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.TpRegisterRequest.prototype.setFamily = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string version = 2;
 * @return {string}
 */
proto.TpRegisterRequest.prototype.getVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.TpRegisterRequest.prototype.setVersion = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * repeated string namespaces = 4;
 * @return {!Array<string>}
 */
proto.TpRegisterRequest.prototype.getNamespacesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};
/** @param {!Array<string>} value */
proto.TpRegisterRequest.prototype.setNamespacesList = function (value) {
    jspb.Message.setField(this, 4, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.TpRegisterRequest.prototype.addNamespaces = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};
proto.TpRegisterRequest.prototype.clearNamespacesList = function () {
    this.setNamespacesList([]);
};
/**
 * optional uint32 max_occupancy = 5;
 * @return {number}
 */
proto.TpRegisterRequest.prototype.getMaxOccupancy = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/** @param {number} value */
proto.TpRegisterRequest.prototype.setMaxOccupancy = function (value) {
    jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpRegisterResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpRegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpRegisterResponse.displayName = 'proto.TpRegisterResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpRegisterResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.TpRegisterResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpRegisterResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpRegisterResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpRegisterResponse}
 */
proto.TpRegisterResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpRegisterResponse;
    return proto.TpRegisterResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpRegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpRegisterResponse}
 */
proto.TpRegisterResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.TpRegisterResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpRegisterResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpRegisterResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpRegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpRegisterResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.TpRegisterResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    ERROR: 2
};
/**
 * optional Status status = 1;
 * @return {!proto.TpRegisterResponse.Status}
 */
proto.TpRegisterResponse.prototype.getStatus = function () {
    return /** @type {!proto.TpRegisterResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.TpRegisterResponse.Status} value */
proto.TpRegisterResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpUnregisterRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpUnregisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpUnregisterRequest.displayName = 'proto.TpUnregisterRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpUnregisterRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.TpUnregisterRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpUnregisterRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpUnregisterRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpUnregisterRequest}
 */
proto.TpUnregisterRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpUnregisterRequest;
    return proto.TpUnregisterRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpUnregisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpUnregisterRequest}
 */
proto.TpUnregisterRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpUnregisterRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpUnregisterRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpUnregisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpUnregisterRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpUnregisterResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpUnregisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpUnregisterResponse.displayName = 'proto.TpUnregisterResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpUnregisterResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.TpUnregisterResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpUnregisterResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpUnregisterResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpUnregisterResponse}
 */
proto.TpUnregisterResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpUnregisterResponse;
    return proto.TpUnregisterResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpUnregisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpUnregisterResponse}
 */
proto.TpUnregisterResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.TpUnregisterResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpUnregisterResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpUnregisterResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpUnregisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpUnregisterResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.TpUnregisterResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    ERROR: 2
};
/**
 * optional Status status = 1;
 * @return {!proto.TpUnregisterResponse.Status}
 */
proto.TpUnregisterResponse.prototype.getStatus = function () {
    return /** @type {!proto.TpUnregisterResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.TpUnregisterResponse.Status} value */
proto.TpUnregisterResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpProcessRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpProcessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpProcessRequest.displayName = 'proto.TpProcessRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpProcessRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.TpProcessRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpProcessRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpProcessRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            header: (f = msg.getHeader()) && transaction_pb.TransactionHeader.toObject(includeInstance, f),
            payload: msg.getPayload_asB64(),
            signature: jspb.Message.getFieldWithDefault(msg, 3, ""),
            contextId: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpProcessRequest}
 */
proto.TpProcessRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpProcessRequest;
    return proto.TpProcessRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpProcessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpProcessRequest}
 */
proto.TpProcessRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new transaction_pb.TransactionHeader;
                reader.readMessage(value, transaction_pb.TransactionHeader.deserializeBinaryFromReader);
                msg.setHeader(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPayload(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setSignature(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setContextId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpProcessRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpProcessRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpProcessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpProcessRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHeader();
    if (f != null) {
        writer.writeMessage(1, f, transaction_pb.TransactionHeader.serializeBinaryToWriter);
    }
    f = message.getPayload_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getSignature();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getContextId();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional TransactionHeader header = 1;
 * @return {?proto.TransactionHeader}
 */
proto.TpProcessRequest.prototype.getHeader = function () {
    return /** @type{?proto.TransactionHeader} */ (jspb.Message.getWrapperField(this, transaction_pb.TransactionHeader, 1));
};
/** @param {?proto.TransactionHeader|undefined} value */
proto.TpProcessRequest.prototype.setHeader = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.TpProcessRequest.prototype.clearHeader = function () {
    this.setHeader(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TpProcessRequest.prototype.hasHeader = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.TpProcessRequest.prototype.getPayload = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.TpProcessRequest.prototype.getPayload_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};
/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.TpProcessRequest.prototype.getPayload_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};
/** @param {!(string|Uint8Array)} value */
proto.TpProcessRequest.prototype.setPayload = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * optional string signature = 3;
 * @return {string}
 */
proto.TpProcessRequest.prototype.getSignature = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.TpProcessRequest.prototype.setSignature = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string context_id = 4;
 * @return {string}
 */
proto.TpProcessRequest.prototype.getContextId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/** @param {string} value */
proto.TpProcessRequest.prototype.setContextId = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpProcessResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpProcessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpProcessResponse.displayName = 'proto.TpProcessResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpProcessResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.TpProcessResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpProcessResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpProcessResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            message: jspb.Message.getFieldWithDefault(msg, 2, ""),
            extendedData: msg.getExtendedData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpProcessResponse}
 */
proto.TpProcessResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpProcessResponse;
    return proto.TpProcessResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpProcessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpProcessResponse}
 */
proto.TpProcessResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.TpProcessResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setMessage(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setExtendedData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpProcessResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpProcessResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpProcessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpProcessResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getMessage();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getExtendedData_asU8();
    if (f.length > 0) {
        writer.writeBytes(3, f);
    }
};
/**
 * @enum {number}
 */
proto.TpProcessResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    INVALID_TRANSACTION: 2,
    INTERNAL_ERROR: 3
};
/**
 * optional Status status = 1;
 * @return {!proto.TpProcessResponse.Status}
 */
proto.TpProcessResponse.prototype.getStatus = function () {
    return /** @type {!proto.TpProcessResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.TpProcessResponse.Status} value */
proto.TpProcessResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional string message = 2;
 * @return {string}
 */
proto.TpProcessResponse.prototype.getMessage = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.TpProcessResponse.prototype.setMessage = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional bytes extended_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.TpProcessResponse.prototype.getExtendedData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * optional bytes extended_data = 3;
 * This is a type-conversion wrapper around `getExtendedData()`
 * @return {string}
 */
proto.TpProcessResponse.prototype.getExtendedData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getExtendedData()));
};
/**
 * optional bytes extended_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtendedData()`
 * @return {!Uint8Array}
 */
proto.TpProcessResponse.prototype.getExtendedData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getExtendedData()));
};
/** @param {!(string|Uint8Array)} value */
proto.TpProcessResponse.prototype.setExtendedData = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,