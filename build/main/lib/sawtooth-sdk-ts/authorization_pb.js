/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.AuthorizationChallengeRequest', null, global);
goog.exportSymbol('proto.AuthorizationChallengeResponse', null, global);
goog.exportSymbol('proto.AuthorizationChallengeResult', null, global);
goog.exportSymbol('proto.AuthorizationChallengeSubmit', null, global);
goog.exportSymbol('proto.AuthorizationTrustRequest', null, global);
goog.exportSymbol('proto.AuthorizationTrustResponse', null, global);
goog.exportSymbol('proto.AuthorizationViolation', null, global);
goog.exportSymbol('proto.ConnectionRequest', null, global);
goog.exportSymbol('proto.ConnectionResponse', null, global);
goog.exportSymbol('proto.ConnectionResponse.AuthorizationType', null, global);
goog.exportSymbol('proto.ConnectionResponse.RoleEntry', null, global);
goog.exportSymbol('proto.ConnectionResponse.Status', null, global);
goog.exportSymbol('proto.RoleType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConnectionRequest.displayName = 'proto.ConnectionRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConnectionRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ConnectionRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConnectionRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConnectionRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            endpoint: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionRequest}
 */
proto.ConnectionRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConnectionRequest;
    return proto.ConnectionRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionRequest}
 */
proto.ConnectionRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setEndpoint(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConnectionRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEndpoint();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string endpoint = 1;
 * @return {string}
 */
proto.ConnectionRequest.prototype.getEndpoint = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ConnectionRequest.prototype.setEndpoint = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ConnectionResponse.repeatedFields_, null);
};
goog.inherits(proto.ConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConnectionResponse.displayName = 'proto.ConnectionResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ConnectionResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConnectionResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ConnectionResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConnectionResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConnectionResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            rolesList: jspb.Message.toObjectList(msg.getRolesList(), proto.ConnectionResponse.RoleEntry.toObject, includeInstance),
            status: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionResponse}
 */
proto.ConnectionResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConnectionResponse;
    return proto.ConnectionResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionResponse}
 */
proto.ConnectionResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ConnectionResponse.RoleEntry;
                reader.readMessage(value, proto.ConnectionResponse.RoleEntry.deserializeBinaryFromReader);
                msg.addRoles(value);
                break;
            case 2:
                var value = /** @type {!proto.ConnectionResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConnectionResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRolesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.ConnectionResponse.RoleEntry.serializeBinaryToWriter);
    }
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * @enum {number}
 */
proto.ConnectionResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    ERROR: 2
};
/**
 * @enum {number}
 */
proto.ConnectionResponse.AuthorizationType = {
    AUTHORIZATION_TYPE_UNSET: 0,
    TRUST: 1,
    CHALLENGE: 2
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionResponse.RoleEntry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionResponse.RoleEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ConnectionResponse.RoleEntry.displayName = 'proto.ConnectionResponse.RoleEntry';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ConnectionResponse.RoleEntry.prototype.toObject = function (opt_includeInstance) {
        return proto.ConnectionResponse.RoleEntry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ConnectionResponse.RoleEntry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ConnectionResponse.RoleEntry.toObject = function (includeInstance, msg) {
        var f, obj = {
            role: jspb.Message.getFieldWithDefault(msg, 1, 0),
            authType: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionResponse.RoleEntry}
 */
proto.ConnectionResponse.RoleEntry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ConnectionResponse.RoleEntry;
    return proto.ConnectionResponse.RoleEntry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionResponse.RoleEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionResponse.RoleEntry}
 */
proto.ConnectionResponse.RoleEntry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.RoleType} */ (reader.readEnum());
                msg.setRole(value);
                break;
            case 2:
                var value = /** @type {!proto.ConnectionResponse.AuthorizationType} */ (reader.readEnum());
                msg.setAuthType(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionResponse.RoleEntry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ConnectionResponse.RoleEntry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionResponse.RoleEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionResponse.RoleEntry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRole();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getAuthType();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * optional RoleType role = 1;
 * @return {!proto.RoleType}
 */
proto.ConnectionResponse.RoleEntry.prototype.getRole = function () {
    return /** @type {!proto.RoleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.RoleType} value */
proto.ConnectionResponse.RoleEntry.prototype.setRole = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional AuthorizationType auth_type = 2;
 * @return {!proto.ConnectionResponse.AuthorizationType}
 */
proto.ConnectionResponse.RoleEntry.prototype.getAuthType = function () {
    return /** @type {!proto.ConnectionResponse.AuthorizationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.ConnectionResponse.AuthorizationType} value */
proto.ConnectionResponse.RoleEntry.prototype.setAuthType = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * repeated RoleEntry roles = 1;
 * @return {!Array<!proto.ConnectionResponse.RoleEntry>}
 */
proto.ConnectionResponse.prototype.getRolesList = function () {
    return /** @type{!Array<!proto.ConnectionResponse.RoleEntry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ConnectionResponse.RoleEntry, 1));
};
/** @param {!Array<!proto.ConnectionResponse.RoleEntry>} value */
proto.ConnectionResponse.prototype.setRolesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.ConnectionResponse.RoleEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConnectionResponse.RoleEntry}
 */
proto.ConnectionResponse.prototype.addRoles = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ConnectionResponse.RoleEntry, opt_index);
};
proto.ConnectionResponse.prototype.clearRolesList = function () {
    this.setRolesList([]);
};
/**
 * optional Status status = 2;
 * @return {!proto.ConnectionResponse.Status}
 */
proto.ConnectionResponse.prototype.getStatus = function () {
    return /** @type {!proto.ConnectionResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.ConnectionResponse.Status} value */
proto.ConnectionResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthorizationTrustRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.AuthorizationTrustRequest.repeatedFields_, null);
};
goog.inherits(proto.AuthorizationTrustRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.AuthorizationTrustRequest.displayName = 'proto.AuthorizationTrustRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AuthorizationTrustRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.AuthorizationTrustRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.AuthorizationTrustRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.AuthorizationTrustRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.AuthorizationTrustRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            rolesList: jspb.Message.getRepeatedField(msg, 1),
            publicKey: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthorizationTrustRequest}
 */
proto.AuthorizationTrustRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.AuthorizationTrustRequest;
    return proto.AuthorizationTrustRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthorizationTrustRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthorizationTrustRequest}
 */
proto.AuthorizationTrustRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Array<!proto.RoleType>} */ (reader.readPackedEnum());
                msg.setRolesList(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPublicKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthorizationTrustRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.AuthorizationTrustRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthorizationTrustRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthorizationTrustRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRolesList();
    if (f.length > 0) {
        writer.writePackedEnum(1, f);
    }
    f = message.getPublicKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * repeated RoleType roles = 1;
 * @return {!Array<!proto.RoleType>}
 */
proto.AuthorizationTrustRequest.prototype.getRolesList = function () {
    return /** @type {!Array<!proto.RoleType>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array<!proto.RoleType>} value */
proto.AuthorizationTrustRequest.prototype.setRolesList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!proto.RoleType} value
 * @param {number=} opt_index
 */
proto.AuthorizationTrustRequest.prototype.addRoles = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.AuthorizationTrustRequest.prototype.clearRolesList = function () {
    this.setRolesList([]);
};
/**
 * optional string public_key = 2;
 * @return {string}
 */
proto.AuthorizationTrustRequest.prototype.getPublicKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.AuthorizationTrustRequest.prototype.setPublicKey = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthorizationTrustResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.AuthorizationTrustResponse.repeatedFields_, null);
};
goog.inherits(proto.AuthorizationTrustResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.AuthorizationTrustResponse.displayName = 'proto.AuthorizationTrustResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AuthorizationTrustResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.AuthorizationTrustResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.AuthorizationTrustResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.AuthorizationTrustResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.AuthorizationTrustResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            rolesList: jspb.Message.getRepeatedField(msg, 1)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthorizationTrustResponse}
 */
proto.AuthorizationTrustResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.AuthorizationTrustResponse;
    return proto.AuthorizationTrustResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthorizationTrustResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthorizationTrustResponse}
 */
proto.AuthorizationTrustResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Array<!proto.RoleType>} */ (reader.readPackedEnum());
                msg.setRolesList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthorizationTrustResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.AuthorizationTrustResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthorizationTrustResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthorizationTrustResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRolesList();
    if (f.length > 0) {
        writer.writePackedEnum(1, f);
    }
};
/**
 * repeated RoleType roles = 1;
 * @return {!Array<!proto.RoleType>}
 */
proto.AuthorizationTrustResponse.prototype.getRolesList = function () {
    return /** @type {!Array<!proto.RoleType>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array<!proto.RoleType>} value */
proto.AuthorizationTrustResponse.prototype.setRolesList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!proto.RoleType} value
 * @param {number=} opt_index
 */
proto.AuthorizationTrustResponse.prototype.addRoles = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.AuthorizationTrustResponse.prototype.clearRolesList = function () {
    this.setRolesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthorizationViolation = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthorizationViolation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.AuthorizationViolation.displayName = 'proto.AuthorizationViolation';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.AuthorizationViolation.prototype.toObject = function (opt_includeInstance) {
        return proto.AuthorizationViolation.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.AuthorizationViolation} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.AuthorizationViolation.toObject = function (includeInstance, msg) {
        var f, obj = {
            violation: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthorizationViolation}
 */
proto.AuthorizationViolation.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.AuthorizationViolation;
    return proto.AuthorizationViolation.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthorizationViolation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthorizationViolation}
 */
proto.AuthorizationViolation.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.RoleType} */ (reader.readEnum());
                msg.setViolation(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthorizationViolation.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.AuthorizationViolation.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthorizationViolation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthorizationViolation.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getViolation();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * optional RoleType violation = 1;
 * @return {!proto.RoleType}
 */
proto.AuthorizationViolation.prototype.getViolation = function () {
    return /** @type {!proto.RoleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.RoleType} value */
proto.AuthorizationViolation.prototype.setViolation = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthorizationChallengeRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthorizationChallengeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.AuthorizationChallengeRequest.displayName = 'proto.AuthorizationChallengeRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.AuthorizationChallengeRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.AuthorizationChallengeRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.AuthorizationChallengeRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.AuthorizationChallengeRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthorizationChallengeRequest}
 */
proto.AuthorizationChallengeRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.AuthorizationChallengeRequest;
    return proto.AuthorizationChallengeRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthorizationChallengeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthorizationChallengeRequest}
 */
proto.AuthorizationChallengeRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthorizationChallengeRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.AuthorizationChallengeRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthorizationChallengeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthorizationChallengeRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthorizationChallengeResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AuthorizationChallengeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.AuthorizationChallengeResponse.displayName = 'proto.AuthorizationChallengeResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.AuthorizationChallengeResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.AuthorizationChallengeResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.AuthorizationChallengeResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.AuthorizationChallengeResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            payload: msg.getPayload_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthorizationChallengeResponse}
 */
proto.AuthorizationChallengeResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.AuthorizationChallengeResponse;
    return proto.AuthorizationChallengeResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthorizationChallengeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthorizationChallengeResponse}
 */
proto.AuthorizationChallengeResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setPayload(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthorizationChallengeResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.AuthorizationChallengeResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthorizationChallengeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthorizationChallengeResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPayload_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
};
/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AuthorizationChallengeResponse.prototype.getPayload = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.AuthorizationChallengeResponse.prototype.getPayload_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};
/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.AuthorizationChallengeResponse.prototype.getPayload_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};
/** @param {!(string|Uint8Array)} value */
proto.AuthorizationChallengeResponse.prototype.setPayload = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthorizationChallengeSubmit = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.AuthorizationChallengeSubmit.repeatedFields_, null);
};
goog.inherits(proto.AuthorizationChallengeSubmit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.AuthorizationChallengeSubmit.displayName = 'proto.AuthorizationChallengeSubmit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AuthorizationChallengeSubmit.repeatedFields_ = [4];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.AuthorizationChallengeSubmit.prototype.toObject = function (opt_includeInstance) {
        return proto.AuthorizationChallengeSubmit.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.AuthorizationChallengeSubmit} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.AuthorizationChallengeSubmit.toObject = function (includeInstance, msg) {
        var f, obj = {
            publicKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            signature: jspb.Message.getFieldWithDefault(msg, 3, ""),
            rolesList: jspb.Message.getRepeatedField(msg, 4)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthorizationChallengeSubmit}
 */
proto.AuthorizationChallengeSubmit.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.AuthorizationChallengeSubmit;
    return proto.AuthorizationChallengeSubmit.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthorizationChallengeSubmit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthorizationChallengeSubmit}
 */
proto.AuthorizationChallengeSubmit.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPublicKey(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setSignature(value);
                break;
            case 4:
                var value = /** @type {!Array<!proto.RoleType>} */ (reader.readPackedEnum());
                msg.setRolesList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthorizationChallengeSubmit.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.AuthorizationChallengeSubmit.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthorizationChallengeSubmit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthorizationChallengeSubmit.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPublicKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getSignature();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getRolesList();
    if (f.length > 0) {
        writer.writePackedEnum(4, f);
    }
};
/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.AuthorizationChallengeSubmit.prototype.getPublicKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.AuthorizationChallengeSubmit.prototype.setPublicKey = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string signature = 3;
 * @return {string}
 */
proto.AuthorizationChallengeSubmit.prototype.getSignature = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.AuthorizationChallengeSubmit.prototype.setSignature = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * repeated RoleType roles = 4;
 * @return {!Array<!proto.RoleType>}
 */
proto.AuthorizationChallengeSubmit.prototype.getRolesList = function () {
    return /** @type {!Array<!proto.RoleType>} */ (jspb.Message.getRepeatedField(this, 4));
};
/** @param {!Array<!proto.RoleType>} value */
proto.AuthorizationChallengeSubmit.prototype.setRolesList = function (value) {
    jspb.Message.setField(this, 4, value || []);
};
/**
 * @param {!proto.RoleType} value
 * @param {number=} opt_index
 */
proto.AuthorizationChallengeSubmit.prototype.addRoles = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};
proto.AuthorizationChallengeSubmit.prototype.clearRolesList = function () {
    this.setRolesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AuthorizationChallengeResult = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.AuthorizationChallengeResult.repeatedFields_, null);
};
goog.inherits(proto.AuthorizationChallengeResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.AuthorizationChallengeResult.displayName = 'proto.AuthorizationChallengeResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AuthorizationChallengeResult.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.AuthorizationChallengeResult.prototype.toObject = function (opt_includeInstance) {
        return proto.AuthorizationChallengeResult.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.AuthorizationChallengeResult} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.AuthorizationChallengeResult.toObject = function (includeInstance, msg) {
        var f, obj = {
            rolesList: jspb.Message.getRepeatedField(msg, 1)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AuthorizationChallengeResult}
 */
proto.AuthorizationChallengeResult.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.AuthorizationChallengeResult;
    return proto.AuthorizationChallengeResult.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AuthorizationChallengeResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AuthorizationChallengeResult}
 */
proto.AuthorizationChallengeResult.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Array<!proto.RoleType>} */ (reader.readPackedEnum());
                msg.setRolesList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AuthorizationChallengeResult.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.AuthorizationChallengeResult.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AuthorizationChallengeResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AuthorizationChallengeResult.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRolesList();
    if (f.length > 0) {
        writer.writePackedEnum(1, f);
    }
};
/**
 * repeated RoleType roles = 1;
 * @return {!Array<!proto.RoleType>}
 */
proto.AuthorizationChallengeResult.prototype.getRolesList = function () {
    return /** @type {!Array<!proto.RoleType>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array<!proto.RoleType>} value */
proto.AuthorizationChallengeResult.prototype.setRolesList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!proto.RoleType} value
 * @param {number=} opt_index
 */
proto.AuthorizationChallengeResult.prototype.addRoles = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.AuthorizationChallengeResult.prototype.clearRolesList = function () {
    this.setRolesList([]);
};
/**
 * @enum {number}
 */
proto.RoleType = {
    ROLE_TYPE_UNSET: 0,
    ALL: 1,
    NETWORK: 2
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,