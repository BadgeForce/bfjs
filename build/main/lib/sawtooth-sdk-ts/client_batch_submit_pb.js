/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var batch_pb = require('./batch_pb.js');
goog.exportSymbol('proto.ClientBatchStatus', null, global);
goog.exportSymbol('proto.ClientBatchStatus.InvalidTransaction', null, global);
goog.exportSymbol('proto.ClientBatchStatus.Status', null, global);
goog.exportSymbol('proto.ClientBatchStatusRequest', null, global);
goog.exportSymbol('proto.ClientBatchStatusResponse', null, global);
goog.exportSymbol('proto.ClientBatchStatusResponse.Status', null, global);
goog.exportSymbol('proto.ClientBatchSubmitRequest', null, global);
goog.exportSymbol('proto.ClientBatchSubmitResponse', null, global);
goog.exportSymbol('proto.ClientBatchSubmitResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientBatchStatus.repeatedFields_, null);
};
goog.inherits(proto.ClientBatchStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientBatchStatus.displayName = 'proto.ClientBatchStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientBatchStatus.repeatedFields_ = [3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientBatchStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientBatchStatus.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientBatchStatus} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientBatchStatus.toObject = function (includeInstance, msg) {
        var f, obj = {
            batchId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            status: jspb.Message.getFieldWithDefault(msg, 2, 0),
            invalidTransactionsList: jspb.Message.toObjectList(msg.getInvalidTransactionsList(), proto.ClientBatchStatus.InvalidTransaction.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchStatus}
 */
proto.ClientBatchStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientBatchStatus;
    return proto.ClientBatchStatus.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchStatus}
 */
proto.ClientBatchStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBatchId(value);
                break;
            case 2:
                var value = /** @type {!proto.ClientBatchStatus.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 3:
                var value = new proto.ClientBatchStatus.InvalidTransaction;
                reader.readMessage(value, proto.ClientBatchStatus.InvalidTransaction.deserializeBinaryFromReader);
                msg.addInvalidTransactions(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientBatchStatus.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchStatus.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBatchId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
    f = message.getInvalidTransactionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.ClientBatchStatus.InvalidTransaction.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ClientBatchStatus.Status = {
    STATUS_UNSET: 0,
    COMMITTED: 1,
    INVALID: 2,
    PENDING: 3,
    UNKNOWN: 4
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchStatus.InvalidTransaction = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientBatchStatus.InvalidTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientBatchStatus.InvalidTransaction.displayName = 'proto.ClientBatchStatus.InvalidTransaction';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientBatchStatus.InvalidTransaction.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientBatchStatus.InvalidTransaction.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientBatchStatus.InvalidTransaction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientBatchStatus.InvalidTransaction.toObject = function (includeInstance, msg) {
        var f, obj = {
            transactionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            message: jspb.Message.getFieldWithDefault(msg, 2, ""),
            extendedData: msg.getExtendedData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchStatus.InvalidTransaction}
 */
proto.ClientBatchStatus.InvalidTransaction.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientBatchStatus.InvalidTransaction;
    return proto.ClientBatchStatus.InvalidTransaction.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchStatus.InvalidTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchStatus.InvalidTransaction}
 */
proto.ClientBatchStatus.InvalidTransaction.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setTransactionId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setMessage(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setExtendedData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchStatus.InvalidTransaction.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientBatchStatus.InvalidTransaction.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchStatus.InvalidTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchStatus.InvalidTransaction.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTransactionId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getMessage();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getExtendedData_asU8();
    if (f.length > 0) {
        writer.writeBytes(3, f);
    }
};
/**
 * optional string transaction_id = 1;
 * @return {string}
 */
proto.ClientBatchStatus.InvalidTransaction.prototype.getTransactionId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ClientBatchStatus.InvalidTransaction.prototype.setTransactionId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string message = 2;
 * @return {string}
 */
proto.ClientBatchStatus.InvalidTransaction.prototype.getMessage = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.ClientBatchStatus.InvalidTransaction.prototype.setMessage = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional bytes extended_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ClientBatchStatus.InvalidTransaction.prototype.getExtendedData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * optional bytes extended_data = 3;
 * This is a type-conversion wrapper around `getExtendedData()`
 * @return {string}
 */
proto.ClientBatchStatus.InvalidTransaction.prototype.getExtendedData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getExtendedData()));
};
/**
 * optional bytes extended_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtendedData()`
 * @return {!Uint8Array}
 */
proto.ClientBatchStatus.InvalidTransaction.prototype.getExtendedData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getExtendedData()));
};
/** @param {!(string|Uint8Array)} value */
proto.ClientBatchStatus.InvalidTransaction.prototype.setExtendedData = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};
/**
 * optional string batch_id = 1;
 * @return {string}
 */
proto.ClientBatchStatus.prototype.getBatchId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.ClientBatchStatus.prototype.setBatchId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional Status status = 2;
 * @return {!proto.ClientBatchStatus.Status}
 */
proto.ClientBatchStatus.prototype.getStatus = function () {
    return /** @type {!proto.ClientBatchStatus.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.ClientBatchStatus.Status} value */
proto.ClientBatchStatus.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * repeated InvalidTransaction invalid_transactions = 3;
 * @return {!Array<!proto.ClientBatchStatus.InvalidTransaction>}
 */
proto.ClientBatchStatus.prototype.getInvalidTransactionsList = function () {
    return /** @type{!Array<!proto.ClientBatchStatus.InvalidTransaction>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ClientBatchStatus.InvalidTransaction, 3));
};
/** @param {!Array<!proto.ClientBatchStatus.InvalidTransaction>} value */
proto.ClientBatchStatus.prototype.setInvalidTransactionsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.ClientBatchStatus.InvalidTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ClientBatchStatus.InvalidTransaction}
 */
proto.ClientBatchStatus.prototype.addInvalidTransactions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ClientBatchStatus.InvalidTransaction, opt_index);
};
proto.ClientBatchStatus.prototype.clearInvalidTransactionsList = function () {
    this.setInvalidTransactionsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchSubmitRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientBatchSubmitRequest.repeatedFields_, null);
};
goog.inherits(proto.ClientBatchSubmitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientBatchSubmitRequest.displayName = 'proto.ClientBatchSubmitRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientBatchSubmitRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientBatchSubmitRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientBatchSubmitRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientBatchSubmitRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientBatchSubmitRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            batchesList: jspb.Message.toObjectList(msg.getBatchesList(), batch_pb.Batch.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchSubmitRequest}
 */
proto.ClientBatchSubmitRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientBatchSubmitRequest;
    return proto.ClientBatchSubmitRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchSubmitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchSubmitRequest}
 */
proto.ClientBatchSubmitRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new batch_pb.Batch;
                reader.readMessage(value, batch_pb.Batch.deserializeBinaryFromReader);
                msg.addBatches(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchSubmitRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientBatchSubmitRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchSubmitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchSubmitRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBatchesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, batch_pb.Batch.serializeBinaryToWriter);
    }
};
/**
 * repeated Batch batches = 1;
 * @return {!Array<!proto.Batch>}
 */
proto.ClientBatchSubmitRequest.prototype.getBatchesList = function () {
    return /** @type{!Array<!proto.Batch>} */ (jspb.Message.getRepeatedWrapperField(this, batch_pb.Batch, 1));
};
/** @param {!Array<!proto.Batch>} value */
proto.ClientBatchSubmitRequest.prototype.setBatchesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.Batch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Batch}
 */
proto.ClientBatchSubmitRequest.prototype.addBatches = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Batch, opt_index);
};
proto.ClientBatchSubmitRequest.prototype.clearBatchesList = function () {
    this.setBatchesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchSubmitResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientBatchSubmitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientBatchSubmitResponse.displayName = 'proto.ClientBatchSubmitResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientBatchSubmitResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientBatchSubmitResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientBatchSubmitResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientBatchSubmitResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchSubmitResponse}
 */
proto.ClientBatchSubmitResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientBatchSubmitResponse;
    return proto.ClientBatchSubmitResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchSubmitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchSubmitResponse}
 */
proto.ClientBatchSubmitResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ClientBatchSubmitResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchSubmitResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientBatchSubmitResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchSubmitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchSubmitResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
};
/**
 * @enum {number}
 */
proto.ClientBatchSubmitResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    INTERNAL_ERROR: 2,
    INVALID_BATCH: 3,
    QUEUE_FULL: 4
};
/**
 * optional Status status = 1;
 * @return {!proto.ClientBatchSubmitResponse.Status}
 */
proto.ClientBatchSubmitResponse.prototype.getStatus = function () {
    return /** @type {!proto.ClientBatchSubmitResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ClientBatchSubmitResponse.Status} value */
proto.ClientBatchSubmitResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchStatusRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientBatchStatusRequest.repeatedFields_, null);
};
goog.inherits(proto.ClientBatchStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientBatchStatusRequest.displayName = 'proto.ClientBatchStatusRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientBatchStatusRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientBatchStatusRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientBatchStatusRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientBatchStatusRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientBatchStatusRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            batchIdsList: jspb.Message.getRepeatedField(msg, 1),
            wait: jspb.Message.getFieldWithDefault(msg, 2, false),
            timeout: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchStatusRequest}
 */
proto.ClientBatchStatusRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientBatchStatusRequest;
    return proto.ClientBatchStatusRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchStatusRequest}
 */
proto.ClientBatchStatusRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addBatchIds(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setWait(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setTimeout(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchStatusRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientBatchStatusRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchStatusRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBatchIdsList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
    f = message.getWait();
    if (f) {
        writer.writeBool(2, f);
    }
    f = message.getTimeout();
    if (f !== 0) {
        writer.writeUint32(3, f);
    }
};
/**
 * repeated string batch_ids = 1;
 * @return {!Array<string>}
 */
proto.ClientBatchStatusRequest.prototype.getBatchIdsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array<string>} value */
proto.ClientBatchStatusRequest.prototype.setBatchIdsList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.ClientBatchStatusRequest.prototype.addBatchIds = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.ClientBatchStatusRequest.prototype.clearBatchIdsList = function () {
    this.setBatchIdsList([]);
};
/**
 * optional bool wait = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ClientBatchStatusRequest.prototype.getWait = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};
/** @param {boolean} value */
proto.ClientBatchStatusRequest.prototype.setWait = function (value) {
    jspb.Message.setProto3BooleanField(this, 2, value);
};
/**
 * optional uint32 timeout = 3;
 * @return {number}
 */
proto.ClientBatchStatusRequest.prototype.getTimeout = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.ClientBatchStatusRequest.prototype.setTimeout = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientBatchStatusResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientBatchStatusResponse.repeatedFields_, null);
};
goog.inherits(proto.ClientBatchStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ClientBatchStatusResponse.displayName = 'proto.ClientBatchStatusResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientBatchStatusResponse.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ClientBatchStatusResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.ClientBatchStatusResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ClientBatchStatusResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ClientBatchStatusResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            batchStatusesList: jspb.Message.toObjectList(msg.getBatchStatusesList(), proto.ClientBatchStatus.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientBatchStatusResponse}
 */
proto.ClientBatchStatusResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ClientBatchStatusResponse;
    return proto.ClientBatchStatusResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientBatchStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientBatchStatusResponse}
 */
proto.ClientBatchStatusResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.ClientBatchStatusResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            case 2:
                var value = new proto.ClientBatchStatus;
                reader.readMessage(value, proto.ClientBatchStatus.deserializeBinaryFromReader);
                msg.addBatchStatuses(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientBatchStatusResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ClientBatchStatusResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientBatchStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientBatchStatusResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getBatchStatusesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.ClientBatchStatus.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.ClientBatchStatusResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    INTERNAL_ERROR: 2,
    NO_RESOURCE: 5,
    INVALID_ID: 8
};
/**
 * optional Status status = 1;
 * @return {!proto.ClientBatchStatusResponse.Status}
 */
proto.ClientBatchStatusResponse.prototype.getStatus = function () {
    return /** @type {!proto.ClientBatchStatusResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.ClientBatchStatusResponse.Status} value */
proto.ClientBatchStatusResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * repeated ClientBatchStatus batch_statuses = 2;
 * @return {!Array<!proto.ClientBatchStatus>}
 */
proto.ClientBatchStatusResponse.prototype.getBatchStatusesList = function () {
    return /** @type{!Array<!proto.ClientBatchStatus>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ClientBatchStatus, 2));
};
/** @param {!Array<!proto.ClientBatchStatus>} value */
proto.ClientBatchStatusResponse.prototype.setBatchStatusesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.ClientBatchStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ClientBatchStatus}
 */
proto.ClientBatchStatusResponse.prototype.addBatchStatuses = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ClientBatchStatus, opt_index);
};
proto.ClientBatchStatusResponse.prototype.clearBatchStatusesList = function () {
    this.setBatchStatusesList([]);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,