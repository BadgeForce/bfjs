/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.exportSymbol('proto.template_pb.Data', null, global);
goog.exportSymbol('proto.template_pb.Template', null, global);
goog.exportSymbol('proto.template_pb.Verification', null, global);
goog.exportSymbol('proto.template_pb.Version', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.template_pb.Template = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.template_pb.Template, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.template_pb.Template.displayName = 'proto.template_pb.Template';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.template_pb.Template.prototype.toObject = function (opt_includeInstance) {
        return proto.template_pb.Template.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.template_pb.Template} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.template_pb.Template.toObject = function (includeInstance, msg) {
        var f, obj = {
            data: (f = msg.getData()) && proto.template_pb.Data.toObject(includeInstance, f),
            verification: (f = msg.getVerification()) && proto.template_pb.Verification.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.template_pb.Template}
 */
proto.template_pb.Template.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.template_pb.Template;
    return proto.template_pb.Template.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.template_pb.Template} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.template_pb.Template}
 */
proto.template_pb.Template.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.template_pb.Data;
                reader.readMessage(value, proto.template_pb.Data.deserializeBinaryFromReader);
                msg.setData(value);
                break;
            case 2:
                var value = new proto.template_pb.Verification;
                reader.readMessage(value, proto.template_pb.Verification.deserializeBinaryFromReader);
                msg.setVerification(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.template_pb.Template.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.template_pb.Template.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.template_pb.Template} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.template_pb.Template.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getData();
    if (f != null) {
        writer.writeMessage(1, f, proto.template_pb.Data.serializeBinaryToWriter);
    }
    f = message.getVerification();
    if (f != null) {
        writer.writeMessage(2, f, proto.template_pb.Verification.serializeBinaryToWriter);
    }
};
/**
 * optional Data data = 1;
 * @return {?proto.template_pb.Data}
 */
proto.template_pb.Template.prototype.getData = function () {
    return /** @type{?proto.template_pb.Data} */ (jspb.Message.getWrapperField(this, proto.template_pb.Data, 1));
};
/** @param {?proto.template_pb.Data|undefined} value */
proto.template_pb.Template.prototype.setData = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};
proto.template_pb.Template.prototype.clearData = function () {
    this.setData(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.template_pb.Template.prototype.hasData = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Verification verification = 2;
 * @return {?proto.template_pb.Verification}
 */
proto.template_pb.Template.prototype.getVerification = function () {
    return /** @type{?proto.template_pb.Verification} */ (jspb.Message.getWrapperField(this, proto.template_pb.Verification, 2));
};
/** @param {?proto.template_pb.Verification|undefined} value */
proto.template_pb.Template.prototype.setVerification = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
proto.template_pb.Template.prototype.clearVerification = function () {
    this.setVerification(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.template_pb.Template.prototype.hasVerification = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.template_pb.Data = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.template_pb.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.template_pb.Data.displayName = 'proto.template_pb.Data';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.template_pb.Data.prototype.toObject = function (opt_includeInstance) {
        return proto.template_pb.Data.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.template_pb.Data} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.template_pb.Data.toObject = function (includeInstance, msg) {
        var f, obj = {
            issuerPub: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            description: jspb.Message.getFieldWithDefault(msg, 3, ""),
            type: jspb.Message.getFieldWithDefault(msg, 4, ""),
            createdAt: jspb.Message.getFieldWithDefault(msg, 5, 0),
            version: (f = msg.getVersion()) && proto.template_pb.Version.toObject(includeInstance, f),
            coreData: (f = msg.getCoreData()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.template_pb.Data}
 */
proto.template_pb.Data.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.template_pb.Data;
    return proto.template_pb.Data.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.template_pb.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.template_pb.Data}
 */
proto.template_pb.Data.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setIssuerPub(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setDescription(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setType(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setCreatedAt(value);
                break;
            case 6:
                var value = new proto.template_pb.Version;
                reader.readMessage(value, proto.template_pb.Version.deserializeBinaryFromReader);
                msg.setVersion(value);
                break;
            case 7:
                var value = new google_protobuf_struct_pb.Struct;
                reader.readMessage(value, google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
                msg.setCoreData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.template_pb.Data.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.template_pb.Data.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.template_pb.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.template_pb.Data.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getIssuerPub();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getDescription();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getType();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getCreatedAt();
    if (f !== 0) {
        writer.writeInt64(5, f);
    }
    f = message.getVersion();
    if (f != null) {
        writer.writeMessage(6, f, proto.template_pb.Version.serializeBinaryToWriter);
    }
    f = message.getCoreData();
    if (f != null) {
        writer.writeMessage(7, f, google_protobuf_struct_pb.Struct.serializeBinaryToWriter);
    }
};
/**
 * optional string issuer_pub = 1;
 * @return {string}
 */
proto.template_pb.Data.prototype.getIssuerPub = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.template_pb.Data.prototype.setIssuerPub = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string name = 2;
 * @return {string}
 */
proto.template_pb.Data.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.template_pb.Data.prototype.setName = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string description = 3;
 * @return {string}
 */
proto.template_pb.Data.prototype.getDescription = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/** @param {string} value */
proto.template_pb.Data.prototype.setDescription = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string type = 4;
 * @return {string}
 */
proto.template_pb.Data.prototype.getType = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/** @param {string} value */
proto.template_pb.Data.prototype.setType = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional int64 created_at = 5;
 * @return {number}
 */
proto.template_pb.Data.prototype.getCreatedAt = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/** @param {number} value */
proto.template_pb.Data.prototype.setCreatedAt = function (value) {
    jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional Version version = 6;
 * @return {?proto.template_pb.Version}
 */
proto.template_pb.Data.prototype.getVersion = function () {
    return /** @type{?proto.template_pb.Version} */ (jspb.Message.getWrapperField(this, proto.template_pb.Version, 6));
};
/** @param {?proto.template_pb.Version|undefined} value */
proto.template_pb.Data.prototype.setVersion = function (value) {
    jspb.Message.setWrapperField(this, 6, value);
};
proto.template_pb.Data.prototype.clearVersion = function () {
    this.setVersion(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.template_pb.Data.prototype.hasVersion = function () {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional google.protobuf.Struct core_data = 7;
 * @return {?proto.google.protobuf.Struct}
 */
proto.template_pb.Data.prototype.getCoreData = function () {
    return /** @type{?proto.google.protobuf.Struct} */ (jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 7));
};
/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.template_pb.Data.prototype.setCoreData = function (value) {
    jspb.Message.setWrapperField(this, 7, value);
};
proto.template_pb.Data.prototype.clearCoreData = function () {
    this.setCoreData(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.template_pb.Data.prototype.hasCoreData = function () {
    return jspb.Message.getField(this, 7) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.template_pb.Version = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.template_pb.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.template_pb.Version.displayName = 'proto.template_pb.Version';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.template_pb.Version.prototype.toObject = function (opt_includeInstance) {
        return proto.template_pb.Version.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.template_pb.Version} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.template_pb.Version.toObject = function (includeInstance, msg) {
        var f, obj = {
            major: jspb.Message.getFieldWithDefault(msg, 1, 0),
            minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
            patch: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.template_pb.Version}
 */
proto.template_pb.Version.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.template_pb.Version;
    return proto.template_pb.Version.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.template_pb.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.template_pb.Version}
 */
proto.template_pb.Version.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMajor(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setMinor(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPatch(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.template_pb.Version.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.template_pb.Version.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.template_pb.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.template_pb.Version.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMajor();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getMinor();
    if (f !== 0) {
        writer.writeInt32(2, f);
    }
    f = message.getPatch();
    if (f !== 0) {
        writer.writeInt32(3, f);
    }
};
/**
 * optional int32 major = 1;
 * @return {number}
 */
proto.template_pb.Version.prototype.getMajor = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {number} value */
proto.template_pb.Version.prototype.setMajor = function (value) {
    jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int32 minor = 2;
 * @return {number}
 */
proto.template_pb.Version.prototype.getMinor = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.template_pb.Version.prototype.setMinor = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int32 patch = 3;
 * @return {number}
 */
proto.template_pb.Version.prototype.getPatch = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {number} value */
proto.template_pb.Version.prototype.setPatch = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.template_pb.Verification = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.template_pb.Verification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.template_pb.Verification.displayName = 'proto.template_pb.Verification';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.template_pb.Verification.prototype.toObject = function (opt_includeInstance) {
        return proto.template_pb.Verification.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.template_pb.Verification} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.template_pb.Verification.toObject = function (includeInstance, msg) {
        var f, obj = {
            signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
            proofOfIntegrityHash: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.template_pb.Verification}
 */
proto.template_pb.Verification.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.template_pb.Verification;
    return proto.template_pb.Verification.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.template_pb.Verification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.template_pb.Verification}
 */
proto.template_pb.Verification.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSignature(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setProofOfIntegrityHash(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.template_pb.Verification.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.template_pb.Verification.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.template_pb.Verification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.template_pb.Verification.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSignature();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getProofOfIntegrityHash();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string signature = 1;
 * @return {string}
 */
proto.template_pb.Verification.prototype.getSignature = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.template_pb.Verification.prototype.setSignature = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string proof_of_integrity_hash = 2;
 * @return {string}
 */
proto.template_pb.Verification.prototype.getProofOfIntegrityHash = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.template_pb.Verification.prototype.setProofOfIntegrityHash = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
goog.object.extend(exports, proto.template_pb);
//# sourceMappingURL=data:application/json;base64,