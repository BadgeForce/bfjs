/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var events_pb = require('./events_pb.js');
goog.exportSymbol('proto.TpEventAddRequest', null, global);
goog.exportSymbol('proto.TpEventAddResponse', null, global);
goog.exportSymbol('proto.TpEventAddResponse.Status', null, global);
goog.exportSymbol('proto.TpReceiptAddDataRequest', null, global);
goog.exportSymbol('proto.TpReceiptAddDataResponse', null, global);
goog.exportSymbol('proto.TpReceiptAddDataResponse.Status', null, global);
goog.exportSymbol('proto.TpStateDeleteRequest', null, global);
goog.exportSymbol('proto.TpStateDeleteResponse', null, global);
goog.exportSymbol('proto.TpStateDeleteResponse.Status', null, global);
goog.exportSymbol('proto.TpStateEntry', null, global);
goog.exportSymbol('proto.TpStateGetRequest', null, global);
goog.exportSymbol('proto.TpStateGetResponse', null, global);
goog.exportSymbol('proto.TpStateGetResponse.Status', null, global);
goog.exportSymbol('proto.TpStateSetRequest', null, global);
goog.exportSymbol('proto.TpStateSetResponse', null, global);
goog.exportSymbol('proto.TpStateSetResponse.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpStateEntry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpStateEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpStateEntry.displayName = 'proto.TpStateEntry';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpStateEntry.prototype.toObject = function (opt_includeInstance) {
        return proto.TpStateEntry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpStateEntry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpStateEntry.toObject = function (includeInstance, msg) {
        var f, obj = {
            address: jspb.Message.getFieldWithDefault(msg, 1, ""),
            data: msg.getData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpStateEntry}
 */
proto.TpStateEntry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpStateEntry;
    return proto.TpStateEntry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpStateEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpStateEntry}
 */
proto.TpStateEntry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpStateEntry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpStateEntry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpStateEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpStateEntry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};
/**
 * optional string address = 1;
 * @return {string}
 */
proto.TpStateEntry.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.TpStateEntry.prototype.setAddress = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.TpStateEntry.prototype.getData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.TpStateEntry.prototype.getData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};
/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.TpStateEntry.prototype.getData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};
/** @param {!(string|Uint8Array)} value */
proto.TpStateEntry.prototype.setData = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpStateGetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TpStateGetRequest.repeatedFields_, null);
};
goog.inherits(proto.TpStateGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpStateGetRequest.displayName = 'proto.TpStateGetRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TpStateGetRequest.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpStateGetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.TpStateGetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpStateGetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpStateGetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            contextId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            addressesList: jspb.Message.getRepeatedField(msg, 2)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpStateGetRequest}
 */
proto.TpStateGetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpStateGetRequest;
    return proto.TpStateGetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpStateGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpStateGetRequest}
 */
proto.TpStateGetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setContextId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.addAddresses(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpStateGetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpStateGetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpStateGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpStateGetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getContextId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(2, f);
    }
};
/**
 * optional string context_id = 1;
 * @return {string}
 */
proto.TpStateGetRequest.prototype.getContextId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.TpStateGetRequest.prototype.setContextId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated string addresses = 2;
 * @return {!Array<string>}
 */
proto.TpStateGetRequest.prototype.getAddressesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};
/** @param {!Array<string>} value */
proto.TpStateGetRequest.prototype.setAddressesList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.TpStateGetRequest.prototype.addAddresses = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.TpStateGetRequest.prototype.clearAddressesList = function () {
    this.setAddressesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpStateGetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TpStateGetResponse.repeatedFields_, null);
};
goog.inherits(proto.TpStateGetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpStateGetResponse.displayName = 'proto.TpStateGetResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TpStateGetResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpStateGetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.TpStateGetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpStateGetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpStateGetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            entriesList: jspb.Message.toObjectList(msg.getEntriesList(), proto.TpStateEntry.toObject, includeInstance),
            status: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpStateGetResponse}
 */
proto.TpStateGetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpStateGetResponse;
    return proto.TpStateGetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpStateGetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpStateGetResponse}
 */
proto.TpStateGetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.TpStateEntry;
                reader.readMessage(value, proto.TpStateEntry.deserializeBinaryFromReader);
                msg.addEntries(value);
                break;
            case 2:
                var value = /** @type {!proto.TpStateGetResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpStateGetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpStateGetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpStateGetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpStateGetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEntriesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.TpStateEntry.serializeBinaryToWriter);
    }
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * @enum {number}
 */
proto.TpStateGetResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    AUTHORIZATION_ERROR: 2
};
/**
 * repeated TpStateEntry entries = 1;
 * @return {!Array<!proto.TpStateEntry>}
 */
proto.TpStateGetResponse.prototype.getEntriesList = function () {
    return /** @type{!Array<!proto.TpStateEntry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.TpStateEntry, 1));
};
/** @param {!Array<!proto.TpStateEntry>} value */
proto.TpStateGetResponse.prototype.setEntriesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.TpStateEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TpStateEntry}
 */
proto.TpStateGetResponse.prototype.addEntries = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TpStateEntry, opt_index);
};
proto.TpStateGetResponse.prototype.clearEntriesList = function () {
    this.setEntriesList([]);
};
/**
 * optional Status status = 2;
 * @return {!proto.TpStateGetResponse.Status}
 */
proto.TpStateGetResponse.prototype.getStatus = function () {
    return /** @type {!proto.TpStateGetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.TpStateGetResponse.Status} value */
proto.TpStateGetResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpStateSetRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TpStateSetRequest.repeatedFields_, null);
};
goog.inherits(proto.TpStateSetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpStateSetRequest.displayName = 'proto.TpStateSetRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TpStateSetRequest.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpStateSetRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.TpStateSetRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpStateSetRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpStateSetRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            contextId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            entriesList: jspb.Message.toObjectList(msg.getEntriesList(), proto.TpStateEntry.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpStateSetRequest}
 */
proto.TpStateSetRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpStateSetRequest;
    return proto.TpStateSetRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpStateSetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpStateSetRequest}
 */
proto.TpStateSetRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setContextId(value);
                break;
            case 2:
                var value = new proto.TpStateEntry;
                reader.readMessage(value, proto.TpStateEntry.deserializeBinaryFromReader);
                msg.addEntries(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpStateSetRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpStateSetRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpStateSetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpStateSetRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getContextId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getEntriesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.TpStateEntry.serializeBinaryToWriter);
    }
};
/**
 * optional string context_id = 1;
 * @return {string}
 */
proto.TpStateSetRequest.prototype.getContextId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.TpStateSetRequest.prototype.setContextId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated TpStateEntry entries = 2;
 * @return {!Array<!proto.TpStateEntry>}
 */
proto.TpStateSetRequest.prototype.getEntriesList = function () {
    return /** @type{!Array<!proto.TpStateEntry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.TpStateEntry, 2));
};
/** @param {!Array<!proto.TpStateEntry>} value */
proto.TpStateSetRequest.prototype.setEntriesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.TpStateEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TpStateEntry}
 */
proto.TpStateSetRequest.prototype.addEntries = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TpStateEntry, opt_index);
};
proto.TpStateSetRequest.prototype.clearEntriesList = function () {
    this.setEntriesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpStateSetResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TpStateSetResponse.repeatedFields_, null);
};
goog.inherits(proto.TpStateSetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpStateSetResponse.displayName = 'proto.TpStateSetResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TpStateSetResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpStateSetResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.TpStateSetResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpStateSetResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpStateSetResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            addressesList: jspb.Message.getRepeatedField(msg, 1),
            status: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpStateSetResponse}
 */
proto.TpStateSetResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpStateSetResponse;
    return proto.TpStateSetResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpStateSetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpStateSetResponse}
 */
proto.TpStateSetResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addAddresses(value);
                break;
            case 2:
                var value = /** @type {!proto.TpStateSetResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpStateSetResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpStateSetResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpStateSetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpStateSetResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * @enum {number}
 */
proto.TpStateSetResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    AUTHORIZATION_ERROR: 2
};
/**
 * repeated string addresses = 1;
 * @return {!Array<string>}
 */
proto.TpStateSetResponse.prototype.getAddressesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array<string>} value */
proto.TpStateSetResponse.prototype.setAddressesList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.TpStateSetResponse.prototype.addAddresses = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.TpStateSetResponse.prototype.clearAddressesList = function () {
    this.setAddressesList([]);
};
/**
 * optional Status status = 2;
 * @return {!proto.TpStateSetResponse.Status}
 */
proto.TpStateSetResponse.prototype.getStatus = function () {
    return /** @type {!proto.TpStateSetResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.TpStateSetResponse.Status} value */
proto.TpStateSetResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpStateDeleteRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TpStateDeleteRequest.repeatedFields_, null);
};
goog.inherits(proto.TpStateDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpStateDeleteRequest.displayName = 'proto.TpStateDeleteRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TpStateDeleteRequest.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpStateDeleteRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.TpStateDeleteRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpStateDeleteRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpStateDeleteRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            contextId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            addressesList: jspb.Message.getRepeatedField(msg, 2)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpStateDeleteRequest}
 */
proto.TpStateDeleteRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpStateDeleteRequest;
    return proto.TpStateDeleteRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpStateDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpStateDeleteRequest}
 */
proto.TpStateDeleteRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setContextId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.addAddresses(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpStateDeleteRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpStateDeleteRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpStateDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpStateDeleteRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getContextId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(2, f);
    }
};
/**
 * optional string context_id = 1;
 * @return {string}
 */
proto.TpStateDeleteRequest.prototype.getContextId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.TpStateDeleteRequest.prototype.setContextId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated string addresses = 2;
 * @return {!Array<string>}
 */
proto.TpStateDeleteRequest.prototype.getAddressesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};
/** @param {!Array<string>} value */
proto.TpStateDeleteRequest.prototype.setAddressesList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.TpStateDeleteRequest.prototype.addAddresses = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.TpStateDeleteRequest.prototype.clearAddressesList = function () {
    this.setAddressesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpStateDeleteResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TpStateDeleteResponse.repeatedFields_, null);
};
goog.inherits(proto.TpStateDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpStateDeleteResponse.displayName = 'proto.TpStateDeleteResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TpStateDeleteResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpStateDeleteResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.TpStateDeleteResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpStateDeleteResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpStateDeleteResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            addressesList: jspb.Message.getRepeatedField(msg, 1),
            status: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpStateDeleteResponse}
 */
proto.TpStateDeleteResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpStateDeleteResponse;
    return proto.TpStateDeleteResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpStateDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpStateDeleteResponse}
 */
proto.TpStateDeleteResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addAddresses(value);
                break;
            case 2:
                var value = /** @type {!proto.TpStateDeleteResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpStateDeleteResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpStateDeleteResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpStateDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpStateDeleteResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * @enum {number}
 */
proto.TpStateDeleteResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    AUTHORIZATION_ERROR: 2
};
/**
 * repeated string addresses = 1;
 * @return {!Array<string>}
 */
proto.TpStateDeleteResponse.prototype.getAddressesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/** @param {!Array<string>} value */
proto.TpStateDeleteResponse.prototype.setAddressesList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.TpStateDeleteResponse.prototype.addAddresses = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
proto.TpStateDeleteResponse.prototype.clearAddressesList = function () {
    this.setAddressesList([]);
};
/**
 * optional Status status = 2;
 * @return {!proto.TpStateDeleteResponse.Status}
 */
proto.TpStateDeleteResponse.prototype.getStatus = function () {
    return /** @type {!proto.TpStateDeleteResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.TpStateDeleteResponse.Status} value */
proto.TpStateDeleteResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpReceiptAddDataRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpReceiptAddDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpReceiptAddDataRequest.displayName = 'proto.TpReceiptAddDataRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpReceiptAddDataRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.TpReceiptAddDataRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpReceiptAddDataRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpReceiptAddDataRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            contextId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            data: msg.getData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpReceiptAddDataRequest}
 */
proto.TpReceiptAddDataRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpReceiptAddDataRequest;
    return proto.TpReceiptAddDataRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpReceiptAddDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpReceiptAddDataRequest}
 */
proto.TpReceiptAddDataRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setContextId(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpReceiptAddDataRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpReceiptAddDataRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpReceiptAddDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpReceiptAddDataRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getContextId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(3, f);
    }
};
/**
 * optional string context_id = 1;
 * @return {string}
 */
proto.TpReceiptAddDataRequest.prototype.getContextId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.TpReceiptAddDataRequest.prototype.setContextId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.TpReceiptAddDataRequest.prototype.getData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.TpReceiptAddDataRequest.prototype.getData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};
/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.TpReceiptAddDataRequest.prototype.getData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};
/** @param {!(string|Uint8Array)} value */
proto.TpReceiptAddDataRequest.prototype.setData = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpReceiptAddDataResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpReceiptAddDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpReceiptAddDataResponse.displayName = 'proto.TpReceiptAddDataResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpReceiptAddDataResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.TpReceiptAddDataResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpReceiptAddDataResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpReceiptAddDataResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpReceiptAddDataResponse}
 */
proto.TpReceiptAddDataResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpReceiptAddDataResponse;
    return proto.TpReceiptAddDataResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpReceiptAddDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpReceiptAddDataResponse}
 */
proto.TpReceiptAddDataResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {!proto.TpReceiptAddDataResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpReceiptAddDataResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpReceiptAddDataResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpReceiptAddDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpReceiptAddDataResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * @enum {number}
 */
proto.TpReceiptAddDataResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    ERROR: 2
};
/**
 * optional Status status = 2;
 * @return {!proto.TpReceiptAddDataResponse.Status}
 */
proto.TpReceiptAddDataResponse.prototype.getStatus = function () {
    return /** @type {!proto.TpReceiptAddDataResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.TpReceiptAddDataResponse.Status} value */
proto.TpReceiptAddDataResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpEventAddRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpEventAddRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpEventAddRequest.displayName = 'proto.TpEventAddRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpEventAddRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.TpEventAddRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpEventAddRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpEventAddRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            contextId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            event: (f = msg.getEvent()) && events_pb.Event.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpEventAddRequest}
 */
proto.TpEventAddRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpEventAddRequest;
    return proto.TpEventAddRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpEventAddRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpEventAddRequest}
 */
proto.TpEventAddRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setContextId(value);
                break;
            case 2:
                var value = new events_pb.Event;
                reader.readMessage(value, events_pb.Event.deserializeBinaryFromReader);
                msg.setEvent(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpEventAddRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpEventAddRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpEventAddRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpEventAddRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getContextId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getEvent();
    if (f != null) {
        writer.writeMessage(2, f, events_pb.Event.serializeBinaryToWriter);
    }
};
/**
 * optional string context_id = 1;
 * @return {string}
 */
proto.TpEventAddRequest.prototype.getContextId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.TpEventAddRequest.prototype.setContextId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional Event event = 2;
 * @return {?proto.Event}
 */
proto.TpEventAddRequest.prototype.getEvent = function () {
    return /** @type{?proto.Event} */ (jspb.Message.getWrapperField(this, events_pb.Event, 2));
};
/** @param {?proto.Event|undefined} value */
proto.TpEventAddRequest.prototype.setEvent = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};
proto.TpEventAddRequest.prototype.clearEvent = function () {
    this.setEvent(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TpEventAddRequest.prototype.hasEvent = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TpEventAddResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TpEventAddResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TpEventAddResponse.displayName = 'proto.TpEventAddResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TpEventAddResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.TpEventAddResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TpEventAddResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TpEventAddResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TpEventAddResponse}
 */
proto.TpEventAddResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TpEventAddResponse;
    return proto.TpEventAddResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TpEventAddResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TpEventAddResponse}
 */
proto.TpEventAddResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {!proto.TpEventAddResponse.Status} */ (reader.readEnum());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TpEventAddResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TpEventAddResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TpEventAddResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TpEventAddResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatus();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * @enum {number}
 */
proto.TpEventAddResponse.Status = {
    STATUS_UNSET: 0,
    OK: 1,
    ERROR: 2
};
/**
 * optional Status status = 2;
 * @return {!proto.TpEventAddResponse.Status}
 */
proto.TpEventAddResponse.prototype.getStatus = function () {
    return /** @type {!proto.TpEventAddResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {!proto.TpEventAddResponse.Status} value */
proto.TpEventAddResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,