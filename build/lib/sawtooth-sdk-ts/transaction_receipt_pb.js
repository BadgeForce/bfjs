/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var events_pb = require('./events_pb.js');
goog.exportSymbol('proto.StateChange', null, global);
goog.exportSymbol('proto.StateChange.Type', null, global);
goog.exportSymbol('proto.StateChangeList', null, global);
goog.exportSymbol('proto.TransactionReceipt', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionReceipt = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.TransactionReceipt.repeatedFields_, null);
};
goog.inherits(proto.TransactionReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.TransactionReceipt.displayName = 'proto.TransactionReceipt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TransactionReceipt.repeatedFields_ = [1, 2, 3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TransactionReceipt.prototype.toObject = function (opt_includeInstance) {
        return proto.TransactionReceipt.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TransactionReceipt} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TransactionReceipt.toObject = function (includeInstance, msg) {
        var f, obj = {
            stateChangesList: jspb.Message.toObjectList(msg.getStateChangesList(), proto.StateChange.toObject, includeInstance),
            eventsList: jspb.Message.toObjectList(msg.getEventsList(), events_pb.Event.toObject, includeInstance),
            dataList: msg.getDataList_asB64(),
            transactionId: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionReceipt}
 */
proto.TransactionReceipt.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TransactionReceipt;
    return proto.TransactionReceipt.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionReceipt}
 */
proto.TransactionReceipt.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.StateChange;
                reader.readMessage(value, proto.StateChange.deserializeBinaryFromReader);
                msg.addStateChanges(value);
                break;
            case 2:
                var value = new events_pb.Event;
                reader.readMessage(value, events_pb.Event.deserializeBinaryFromReader);
                msg.addEvents(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addData(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setTransactionId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionReceipt.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TransactionReceipt.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionReceipt.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStateChangesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.StateChange.serializeBinaryToWriter);
    }
    f = message.getEventsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, events_pb.Event.serializeBinaryToWriter);
    }
    f = message.getDataList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(3, f);
    }
    f = message.getTransactionId();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * repeated StateChange state_changes = 1;
 * @return {!Array<!proto.StateChange>}
 */
proto.TransactionReceipt.prototype.getStateChangesList = function () {
    return /** @type{!Array<!proto.StateChange>} */ (jspb.Message.getRepeatedWrapperField(this, proto.StateChange, 1));
};
/** @param {!Array<!proto.StateChange>} value */
proto.TransactionReceipt.prototype.setStateChangesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.StateChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StateChange}
 */
proto.TransactionReceipt.prototype.addStateChanges = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.StateChange, opt_index);
};
proto.TransactionReceipt.prototype.clearStateChangesList = function () {
    this.setStateChangesList([]);
};
/**
 * repeated Event events = 2;
 * @return {!Array<!proto.Event>}
 */
proto.TransactionReceipt.prototype.getEventsList = function () {
    return /** @type{!Array<!proto.Event>} */ (jspb.Message.getRepeatedWrapperField(this, events_pb.Event, 2));
};
/** @param {!Array<!proto.Event>} value */
proto.TransactionReceipt.prototype.setEventsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Event}
 */
proto.TransactionReceipt.prototype.addEvents = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Event, opt_index);
};
proto.TransactionReceipt.prototype.clearEventsList = function () {
    this.setEventsList([]);
};
/**
 * repeated bytes data = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.TransactionReceipt.prototype.getDataList = function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};
/**
 * repeated bytes data = 3;
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<string>}
 */
proto.TransactionReceipt.prototype.getDataList_asB64 = function () {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getDataList()));
};
/**
 * repeated bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataList()`
 * @return {!Array<!Uint8Array>}
 */
proto.TransactionReceipt.prototype.getDataList_asU8 = function () {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(this.getDataList()));
};
/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.TransactionReceipt.prototype.setDataList = function (value) {
    jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.TransactionReceipt.prototype.addData = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
proto.TransactionReceipt.prototype.clearDataList = function () {
    this.setDataList([]);
};
/**
 * optional string transaction_id = 4;
 * @return {string}
 */
proto.TransactionReceipt.prototype.getTransactionId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/** @param {string} value */
proto.TransactionReceipt.prototype.setTransactionId = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StateChange = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StateChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.StateChange.displayName = 'proto.StateChange';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.StateChange.prototype.toObject = function (opt_includeInstance) {
        return proto.StateChange.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.StateChange} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.StateChange.toObject = function (includeInstance, msg) {
        var f, obj = {
            address: jspb.Message.getFieldWithDefault(msg, 1, ""),
            value: msg.getValue_asB64(),
            type: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StateChange}
 */
proto.StateChange.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.StateChange;
    return proto.StateChange.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StateChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StateChange}
 */
proto.StateChange.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setValue(value);
                break;
            case 3:
                var value = /** @type {!proto.StateChange.Type} */ (reader.readEnum());
                msg.setType(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StateChange.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.StateChange.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StateChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StateChange.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getValue_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
    f = message.getType();
    if (f !== 0.0) {
        writer.writeEnum(3, f);
    }
};
/**
 * @enum {number}
 */
proto.StateChange.Type = {
    TYPE_UNSET: 0,
    SET: 1,
    DELETE: 2
};
/**
 * optional string address = 1;
 * @return {string}
 */
proto.StateChange.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.StateChange.prototype.setAddress = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.StateChange.prototype.getValue = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.StateChange.prototype.getValue_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValue()));
};
/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.StateChange.prototype.getValue_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValue()));
};
/** @param {!(string|Uint8Array)} value */
proto.StateChange.prototype.setValue = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};
/**
 * optional Type type = 3;
 * @return {!proto.StateChange.Type}
 */
proto.StateChange.prototype.getType = function () {
    return /** @type {!proto.StateChange.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {!proto.StateChange.Type} value */
proto.StateChange.prototype.setType = function (value) {
    jspb.Message.setProto3EnumField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StateChangeList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.StateChangeList.repeatedFields_, null);
};
goog.inherits(proto.StateChangeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.StateChangeList.displayName = 'proto.StateChangeList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StateChangeList.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.StateChangeList.prototype.toObject = function (opt_includeInstance) {
        return proto.StateChangeList.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.StateChangeList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.StateChangeList.toObject = function (includeInstance, msg) {
        var f, obj = {
            stateChangesList: jspb.Message.toObjectList(msg.getStateChangesList(), proto.StateChange.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StateChangeList}
 */
proto.StateChangeList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.StateChangeList;
    return proto.StateChangeList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StateChangeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StateChangeList}
 */
proto.StateChangeList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.StateChange;
                reader.readMessage(value, proto.StateChange.deserializeBinaryFromReader);
                msg.addStateChanges(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StateChangeList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.StateChangeList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StateChangeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StateChangeList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStateChangesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.StateChange.serializeBinaryToWriter);
    }
};
/**
 * repeated StateChange state_changes = 1;
 * @return {!Array<!proto.StateChange>}
 */
proto.StateChangeList.prototype.getStateChangesList = function () {
    return /** @type{!Array<!proto.StateChange>} */ (jspb.Message.getRepeatedWrapperField(this, proto.StateChange, 1));
};
/** @param {!Array<!proto.StateChange>} value */
proto.StateChangeList.prototype.setStateChangesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.StateChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StateChange}
 */
proto.StateChangeList.prototype.addStateChanges = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.StateChange, opt_index);
};
proto.StateChangeList.prototype.clearStateChangesList = function () {
    this.setStateChangesList([]);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,