/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var transaction_pb = require('./transaction_pb.js');
goog.exportSymbol('proto.Batch', null, global);
goog.exportSymbol('proto.BatchHeader', null, global);
goog.exportSymbol('proto.BatchList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BatchHeader = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.BatchHeader.repeatedFields_, null);
};
goog.inherits(proto.BatchHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.BatchHeader.displayName = 'proto.BatchHeader';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BatchHeader.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.BatchHeader.prototype.toObject = function (opt_includeInstance) {
        return proto.BatchHeader.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.BatchHeader} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.BatchHeader.toObject = function (includeInstance, msg) {
        var f, obj = {
            signerPublicKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            transactionIdsList: jspb.Message.getRepeatedField(msg, 2)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BatchHeader}
 */
proto.BatchHeader.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.BatchHeader;
    return proto.BatchHeader.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BatchHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BatchHeader}
 */
proto.BatchHeader.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSignerPublicKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.addTransactionIds(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BatchHeader.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.BatchHeader.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BatchHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BatchHeader.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSignerPublicKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTransactionIdsList();
    if (f.length > 0) {
        writer.writeRepeatedString(2, f);
    }
};
/**
 * optional string signer_public_key = 1;
 * @return {string}
 */
proto.BatchHeader.prototype.getSignerPublicKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.BatchHeader.prototype.setSignerPublicKey = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated string transaction_ids = 2;
 * @return {!Array<string>}
 */
proto.BatchHeader.prototype.getTransactionIdsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};
/** @param {!Array<string>} value */
proto.BatchHeader.prototype.setTransactionIdsList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.BatchHeader.prototype.addTransactionIds = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.BatchHeader.prototype.clearTransactionIdsList = function () {
    this.setTransactionIdsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Batch = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.Batch.repeatedFields_, null);
};
goog.inherits(proto.Batch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.Batch.displayName = 'proto.Batch';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Batch.repeatedFields_ = [3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Batch.prototype.toObject = function (opt_includeInstance) {
        return proto.Batch.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Batch} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Batch.toObject = function (includeInstance, msg) {
        var f, obj = {
            header: msg.getHeader_asB64(),
            headerSignature: jspb.Message.getFieldWithDefault(msg, 2, ""),
            transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(), transaction_pb.Transaction.toObject, includeInstance),
            trace: jspb.Message.getFieldWithDefault(msg, 4, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Batch}
 */
proto.Batch.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Batch;
    return proto.Batch.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Batch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Batch}
 */
proto.Batch.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setHeader(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setHeaderSignature(value);
                break;
            case 3:
                var value = new transaction_pb.Transaction;
                reader.readMessage(value, transaction_pb.Transaction.deserializeBinaryFromReader);
                msg.addTransactions(value);
                break;
            case 4:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setTrace(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Batch.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Batch.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Batch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Batch.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHeader_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getHeaderSignature();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getTransactionsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, transaction_pb.Transaction.serializeBinaryToWriter);
    }
    f = message.getTrace();
    if (f) {
        writer.writeBool(4, f);
    }
};
/**
 * optional bytes header = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Batch.prototype.getHeader = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes header = 1;
 * This is a type-conversion wrapper around `getHeader()`
 * @return {string}
 */
proto.Batch.prototype.getHeader_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHeader()));
};
/**
 * optional bytes header = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeader()`
 * @return {!Uint8Array}
 */
proto.Batch.prototype.getHeader_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHeader()));
};
/** @param {!(string|Uint8Array)} value */
proto.Batch.prototype.setHeader = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * optional string header_signature = 2;
 * @return {string}
 */
proto.Batch.prototype.getHeaderSignature = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.Batch.prototype.setHeaderSignature = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * repeated Transaction transactions = 3;
 * @return {!Array<!proto.Transaction>}
 */
proto.Batch.prototype.getTransactionsList = function () {
    return /** @type{!Array<!proto.Transaction>} */ (jspb.Message.getRepeatedWrapperField(this, transaction_pb.Transaction, 3));
};
/** @param {!Array<!proto.Transaction>} value */
proto.Batch.prototype.setTransactionsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Transaction}
 */
proto.Batch.prototype.addTransactions = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Transaction, opt_index);
};
proto.Batch.prototype.clearTransactionsList = function () {
    this.setTransactionsList([]);
};
/**
 * optional bool trace = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Batch.prototype.getTrace = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};
/** @param {boolean} value */
proto.Batch.prototype.setTrace = function (value) {
    jspb.Message.setProto3BooleanField(this, 4, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BatchList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.BatchList.repeatedFields_, null);
};
goog.inherits(proto.BatchList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.BatchList.displayName = 'proto.BatchList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BatchList.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.BatchList.prototype.toObject = function (opt_includeInstance) {
        return proto.BatchList.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.BatchList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.BatchList.toObject = function (includeInstance, msg) {
        var f, obj = {
            batchesList: jspb.Message.toObjectList(msg.getBatchesList(), proto.Batch.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BatchList}
 */
proto.BatchList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.BatchList;
    return proto.BatchList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BatchList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BatchList}
 */
proto.BatchList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.Batch;
                reader.readMessage(value, proto.Batch.deserializeBinaryFromReader);
                msg.addBatches(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BatchList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.BatchList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BatchList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BatchList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBatchesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.Batch.serializeBinaryToWriter);
    }
};
/**
 * repeated Batch batches = 1;
 * @return {!Array<!proto.Batch>}
 */
proto.BatchList.prototype.getBatchesList = function () {
    return /** @type{!Array<!proto.Batch>} */ (jspb.Message.getRepeatedWrapperField(this, proto.Batch, 1));
};
/** @param {!Array<!proto.Batch>} value */
proto.BatchList.prototype.setBatchesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.Batch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Batch}
 */
proto.BatchList.prototype.addBatches = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Batch, opt_index);
};
proto.BatchList.prototype.clearBatchesList = function () {
    this.setBatchesList([]);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,