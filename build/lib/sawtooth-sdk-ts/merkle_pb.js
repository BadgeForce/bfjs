/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.ChangeLogEntry', null, global);
goog.exportSymbol('proto.ChangeLogEntry.Successor', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeLogEntry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ChangeLogEntry.repeatedFields_, null);
};
goog.inherits(proto.ChangeLogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ChangeLogEntry.displayName = 'proto.ChangeLogEntry';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChangeLogEntry.repeatedFields_ = [2, 3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ChangeLogEntry.prototype.toObject = function (opt_includeInstance) {
        return proto.ChangeLogEntry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ChangeLogEntry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ChangeLogEntry.toObject = function (includeInstance, msg) {
        var f, obj = {
            parent: msg.getParent_asB64(),
            additionsList: msg.getAdditionsList_asB64(),
            successorsList: jspb.Message.toObjectList(msg.getSuccessorsList(), proto.ChangeLogEntry.Successor.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeLogEntry}
 */
proto.ChangeLogEntry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ChangeLogEntry;
    return proto.ChangeLogEntry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeLogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeLogEntry}
 */
proto.ChangeLogEntry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setParent(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addAdditions(value);
                break;
            case 3:
                var value = new proto.ChangeLogEntry.Successor;
                reader.readMessage(value, proto.ChangeLogEntry.Successor.deserializeBinaryFromReader);
                msg.addSuccessors(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeLogEntry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ChangeLogEntry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeLogEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeLogEntry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getParent_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getAdditionsList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
    }
    f = message.getSuccessorsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.ChangeLogEntry.Successor.serializeBinaryToWriter);
    }
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChangeLogEntry.Successor = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ChangeLogEntry.Successor.repeatedFields_, null);
};
goog.inherits(proto.ChangeLogEntry.Successor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.ChangeLogEntry.Successor.displayName = 'proto.ChangeLogEntry.Successor';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChangeLogEntry.Successor.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ChangeLogEntry.Successor.prototype.toObject = function (opt_includeInstance) {
        return proto.ChangeLogEntry.Successor.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ChangeLogEntry.Successor} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ChangeLogEntry.Successor.toObject = function (includeInstance, msg) {
        var f, obj = {
            successor: msg.getSuccessor_asB64(),
            deletionsList: msg.getDeletionsList_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChangeLogEntry.Successor}
 */
proto.ChangeLogEntry.Successor.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ChangeLogEntry.Successor;
    return proto.ChangeLogEntry.Successor.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChangeLogEntry.Successor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChangeLogEntry.Successor}
 */
proto.ChangeLogEntry.Successor.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSuccessor(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addDeletions(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChangeLogEntry.Successor.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ChangeLogEntry.Successor.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChangeLogEntry.Successor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChangeLogEntry.Successor.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSuccessor_asU8();
    if (f.length > 0) {
        writer.writeBytes(1, f);
    }
    f = message.getDeletionsList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
    }
};
/**
 * optional bytes successor = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ChangeLogEntry.Successor.prototype.getSuccessor = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes successor = 1;
 * This is a type-conversion wrapper around `getSuccessor()`
 * @return {string}
 */
proto.ChangeLogEntry.Successor.prototype.getSuccessor_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSuccessor()));
};
/**
 * optional bytes successor = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSuccessor()`
 * @return {!Uint8Array}
 */
proto.ChangeLogEntry.Successor.prototype.getSuccessor_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSuccessor()));
};
/** @param {!(string|Uint8Array)} value */
proto.ChangeLogEntry.Successor.prototype.setSuccessor = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * repeated bytes deletions = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ChangeLogEntry.Successor.prototype.getDeletionsList = function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};
/**
 * repeated bytes deletions = 2;
 * This is a type-conversion wrapper around `getDeletionsList()`
 * @return {!Array<string>}
 */
proto.ChangeLogEntry.Successor.prototype.getDeletionsList_asB64 = function () {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getDeletionsList()));
};
/**
 * repeated bytes deletions = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeletionsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ChangeLogEntry.Successor.prototype.getDeletionsList_asU8 = function () {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(this.getDeletionsList()));
};
/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ChangeLogEntry.Successor.prototype.setDeletionsList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ChangeLogEntry.Successor.prototype.addDeletions = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.ChangeLogEntry.Successor.prototype.clearDeletionsList = function () {
    this.setDeletionsList([]);
};
/**
 * optional bytes parent = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ChangeLogEntry.prototype.getParent = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * optional bytes parent = 1;
 * This is a type-conversion wrapper around `getParent()`
 * @return {string}
 */
proto.ChangeLogEntry.prototype.getParent_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getParent()));
};
/**
 * optional bytes parent = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParent()`
 * @return {!Uint8Array}
 */
proto.ChangeLogEntry.prototype.getParent_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getParent()));
};
/** @param {!(string|Uint8Array)} value */
proto.ChangeLogEntry.prototype.setParent = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};
/**
 * repeated bytes additions = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.ChangeLogEntry.prototype.getAdditionsList = function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};
/**
 * repeated bytes additions = 2;
 * This is a type-conversion wrapper around `getAdditionsList()`
 * @return {!Array<string>}
 */
proto.ChangeLogEntry.prototype.getAdditionsList_asB64 = function () {
    return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getAdditionsList()));
};
/**
 * repeated bytes additions = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdditionsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.ChangeLogEntry.prototype.getAdditionsList_asU8 = function () {
    return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(this.getAdditionsList()));
};
/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.ChangeLogEntry.prototype.setAdditionsList = function (value) {
    jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.ChangeLogEntry.prototype.addAdditions = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
proto.ChangeLogEntry.prototype.clearAdditionsList = function () {
    this.setAdditionsList([]);
};
/**
 * repeated Successor successors = 3;
 * @return {!Array<!proto.ChangeLogEntry.Successor>}
 */
proto.ChangeLogEntry.prototype.getSuccessorsList = function () {
    return /** @type{!Array<!proto.ChangeLogEntry.Successor>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ChangeLogEntry.Successor, 3));
};
/** @param {!Array<!proto.ChangeLogEntry.Successor>} value */
proto.ChangeLogEntry.prototype.setSuccessorsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.ChangeLogEntry.Successor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChangeLogEntry.Successor}
 */
proto.ChangeLogEntry.prototype.addSuccessors = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ChangeLogEntry.Successor, opt_index);
};
proto.ChangeLogEntry.prototype.clearSuccessorsList = function () {
    this.setSuccessorsList([]);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,