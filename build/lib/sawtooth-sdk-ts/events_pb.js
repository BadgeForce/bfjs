/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.Event', null, global);
goog.exportSymbol('proto.Event.Attribute', null, global);
goog.exportSymbol('proto.EventFilter', null, global);
goog.exportSymbol('proto.EventFilter.FilterType', null, global);
goog.exportSymbol('proto.EventList', null, global);
goog.exportSymbol('proto.EventSubscription', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Event = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.Event.repeatedFields_, null);
};
goog.inherits(proto.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.Event.displayName = 'proto.Event';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Event.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Event.prototype.toObject = function (opt_includeInstance) {
        return proto.Event.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Event} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Event.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventType: jspb.Message.getFieldWithDefault(msg, 1, ""),
            attributesList: jspb.Message.toObjectList(msg.getAttributesList(), proto.Event.Attribute.toObject, includeInstance),
            data: msg.getData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Event;
    return proto.Event.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setEventType(value);
                break;
            case 2:
                var value = new proto.Event.Attribute;
                reader.readMessage(value, proto.Event.Attribute.deserializeBinaryFromReader);
                msg.addAttributes(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Event.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Event.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Event.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventType();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAttributesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.Event.Attribute.serializeBinaryToWriter);
    }
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(3, f);
    }
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Event.Attribute = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Event.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.Event.Attribute.displayName = 'proto.Event.Attribute';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Event.Attribute.prototype.toObject = function (opt_includeInstance) {
        return proto.Event.Attribute.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Event.Attribute} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Event.Attribute.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            value: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Event.Attribute}
 */
proto.Event.Attribute.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Event.Attribute;
    return proto.Event.Attribute.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Event.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Event.Attribute}
 */
proto.Event.Attribute.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Event.Attribute.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Event.Attribute.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Event.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Event.Attribute.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.Event.Attribute.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.Event.Attribute.prototype.setKey = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string value = 2;
 * @return {string}
 */
proto.Event.Attribute.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.Event.Attribute.prototype.setValue = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string event_type = 1;
 * @return {string}
 */
proto.Event.prototype.getEventType = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.Event.prototype.setEventType = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated Attribute attributes = 2;
 * @return {!Array<!proto.Event.Attribute>}
 */
proto.Event.prototype.getAttributesList = function () {
    return /** @type{!Array<!proto.Event.Attribute>} */ (jspb.Message.getRepeatedWrapperField(this, proto.Event.Attribute, 2));
};
/** @param {!Array<!proto.Event.Attribute>} value */
proto.Event.prototype.setAttributesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.Event.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Event.Attribute}
 */
proto.Event.prototype.addAttributes = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Event.Attribute, opt_index);
};
proto.Event.prototype.clearAttributesList = function () {
    this.setAttributesList([]);
};
/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Event.prototype.getData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Event.prototype.getData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};
/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Event.prototype.getData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};
/** @param {!(string|Uint8Array)} value */
proto.Event.prototype.setData = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.EventList.repeatedFields_, null);
};
goog.inherits(proto.EventList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.EventList.displayName = 'proto.EventList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EventList.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.EventList.prototype.toObject = function (opt_includeInstance) {
        return proto.EventList.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.EventList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.EventList.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventsList: jspb.Message.toObjectList(msg.getEventsList(), proto.Event.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventList}
 */
proto.EventList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.EventList;
    return proto.EventList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventList}
 */
proto.EventList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.Event;
                reader.readMessage(value, proto.Event.deserializeBinaryFromReader);
                msg.addEvents(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.EventList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.Event.serializeBinaryToWriter);
    }
};
/**
 * repeated Event events = 1;
 * @return {!Array<!proto.Event>}
 */
proto.EventList.prototype.getEventsList = function () {
    return /** @type{!Array<!proto.Event>} */ (jspb.Message.getRepeatedWrapperField(this, proto.Event, 1));
};
/** @param {!Array<!proto.Event>} value */
proto.EventList.prototype.setEventsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Event}
 */
proto.EventList.prototype.addEvents = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Event, opt_index);
};
proto.EventList.prototype.clearEventsList = function () {
    this.setEventsList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventFilter = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.EventFilter.displayName = 'proto.EventFilter';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.EventFilter.prototype.toObject = function (opt_includeInstance) {
        return proto.EventFilter.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.EventFilter} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.EventFilter.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            matchString: jspb.Message.getFieldWithDefault(msg, 2, ""),
            filterType: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventFilter}
 */
proto.EventFilter.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.EventFilter;
    return proto.EventFilter.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventFilter}
 */
proto.EventFilter.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setMatchString(value);
                break;
            case 3:
                var value = /** @type {!proto.EventFilter.FilterType} */ (reader.readEnum());
                msg.setFilterType(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventFilter.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.EventFilter.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventFilter.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getMatchString();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getFilterType();
    if (f !== 0.0) {
        writer.writeEnum(3, f);
    }
};
/**
 * @enum {number}
 */
proto.EventFilter.FilterType = {
    FILTER_TYPE_UNSET: 0,
    SIMPLE_ANY: 1,
    SIMPLE_ALL: 2,
    REGEX_ANY: 3,
    REGEX_ALL: 4
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.EventFilter.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.EventFilter.prototype.setKey = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string match_string = 2;
 * @return {string}
 */
proto.EventFilter.prototype.getMatchString = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.EventFilter.prototype.setMatchString = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional FilterType filter_type = 3;
 * @return {!proto.EventFilter.FilterType}
 */
proto.EventFilter.prototype.getFilterType = function () {
    return /** @type {!proto.EventFilter.FilterType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/** @param {!proto.EventFilter.FilterType} value */
proto.EventFilter.prototype.setFilterType = function (value) {
    jspb.Message.setProto3EnumField(this, 3, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventSubscription = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.EventSubscription.repeatedFields_, null);
};
goog.inherits(proto.EventSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.EventSubscription.displayName = 'proto.EventSubscription';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EventSubscription.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.EventSubscription.prototype.toObject = function (opt_includeInstance) {
        return proto.EventSubscription.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.EventSubscription} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.EventSubscription.toObject = function (includeInstance, msg) {
        var f, obj = {
            eventType: jspb.Message.getFieldWithDefault(msg, 1, ""),
            filtersList: jspb.Message.toObjectList(msg.getFiltersList(), proto.EventFilter.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventSubscription}
 */
proto.EventSubscription.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.EventSubscription;
    return proto.EventSubscription.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventSubscription}
 */
proto.EventSubscription.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setEventType(value);
                break;
            case 2:
                var value = new proto.EventFilter;
                reader.readMessage(value, proto.EventFilter.deserializeBinaryFromReader);
                msg.addFilters(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventSubscription.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.EventSubscription.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventSubscription.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getEventType();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getFiltersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.EventFilter.serializeBinaryToWriter);
    }
};
/**
 * optional string event_type = 1;
 * @return {string}
 */
proto.EventSubscription.prototype.getEventType = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.EventSubscription.prototype.setEventType = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated EventFilter filters = 2;
 * @return {!Array<!proto.EventFilter>}
 */
proto.EventSubscription.prototype.getFiltersList = function () {
    return /** @type{!Array<!proto.EventFilter>} */ (jspb.Message.getRepeatedWrapperField(this, proto.EventFilter, 2));
};
/** @param {!Array<!proto.EventFilter>} value */
proto.EventSubscription.prototype.setFiltersList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.EventFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EventFilter}
 */
proto.EventSubscription.prototype.addFilters = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.EventFilter, opt_index);
};
proto.EventSubscription.prototype.clearFiltersList = function () {
    this.setFiltersList([]);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,