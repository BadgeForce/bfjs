/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.Policy', null, global);
goog.exportSymbol('proto.Policy.Entry', null, global);
goog.exportSymbol('proto.Policy.EntryType', null, global);
goog.exportSymbol('proto.PolicyList', null, global);
goog.exportSymbol('proto.Role', null, global);
goog.exportSymbol('proto.RoleList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Policy = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.Policy.repeatedFields_, null);
};
goog.inherits(proto.Policy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.Policy.displayName = 'proto.Policy';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Policy.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Policy.prototype.toObject = function (opt_includeInstance) {
        return proto.Policy.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Policy} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Policy.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            entriesList: jspb.Message.toObjectList(msg.getEntriesList(), proto.Policy.Entry.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Policy}
 */
proto.Policy.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Policy;
    return proto.Policy.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Policy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Policy}
 */
proto.Policy.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = new proto.Policy.Entry;
                reader.readMessage(value, proto.Policy.Entry.deserializeBinaryFromReader);
                msg.addEntries(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Policy.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Policy.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Policy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Policy.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getEntriesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.Policy.Entry.serializeBinaryToWriter);
    }
};
/**
 * @enum {number}
 */
proto.Policy.EntryType = {
    ENTRY_TYPE_UNSET: 0,
    PERMIT_KEY: 1,
    DENY_KEY: 2
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Policy.Entry = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Policy.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.Policy.Entry.displayName = 'proto.Policy.Entry';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Policy.Entry.prototype.toObject = function (opt_includeInstance) {
        return proto.Policy.Entry.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Policy.Entry} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Policy.Entry.toObject = function (includeInstance, msg) {
        var f, obj = {
            type: jspb.Message.getFieldWithDefault(msg, 1, 0),
            key: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Policy.Entry}
 */
proto.Policy.Entry.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Policy.Entry;
    return proto.Policy.Entry.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Policy.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Policy.Entry}
 */
proto.Policy.Entry.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.Policy.EntryType} */ (reader.readEnum());
                msg.setType(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Policy.Entry.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Policy.Entry.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Policy.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Policy.Entry.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getType();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional EntryType type = 1;
 * @return {!proto.Policy.EntryType}
 */
proto.Policy.Entry.prototype.getType = function () {
    return /** @type {!proto.Policy.EntryType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/** @param {!proto.Policy.EntryType} value */
proto.Policy.Entry.prototype.setType = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.Policy.Entry.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.Policy.Entry.prototype.setKey = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.Policy.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.Policy.prototype.setName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated Entry entries = 2;
 * @return {!Array<!proto.Policy.Entry>}
 */
proto.Policy.prototype.getEntriesList = function () {
    return /** @type{!Array<!proto.Policy.Entry>} */ (jspb.Message.getRepeatedWrapperField(this, proto.Policy.Entry, 2));
};
/** @param {!Array<!proto.Policy.Entry>} value */
proto.Policy.prototype.setEntriesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.Policy.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Policy.Entry}
 */
proto.Policy.prototype.addEntries = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Policy.Entry, opt_index);
};
proto.Policy.prototype.clearEntriesList = function () {
    this.setEntriesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PolicyList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.PolicyList.repeatedFields_, null);
};
goog.inherits(proto.PolicyList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.PolicyList.displayName = 'proto.PolicyList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PolicyList.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.PolicyList.prototype.toObject = function (opt_includeInstance) {
        return proto.PolicyList.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.PolicyList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.PolicyList.toObject = function (includeInstance, msg) {
        var f, obj = {
            policiesList: jspb.Message.toObjectList(msg.getPoliciesList(), proto.Policy.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PolicyList}
 */
proto.PolicyList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.PolicyList;
    return proto.PolicyList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PolicyList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PolicyList}
 */
proto.PolicyList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.Policy;
                reader.readMessage(value, proto.Policy.deserializeBinaryFromReader);
                msg.addPolicies(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PolicyList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.PolicyList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PolicyList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PolicyList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPoliciesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.Policy.serializeBinaryToWriter);
    }
};
/**
 * repeated Policy policies = 1;
 * @return {!Array<!proto.Policy>}
 */
proto.PolicyList.prototype.getPoliciesList = function () {
    return /** @type{!Array<!proto.Policy>} */ (jspb.Message.getRepeatedWrapperField(this, proto.Policy, 1));
};
/** @param {!Array<!proto.Policy>} value */
proto.PolicyList.prototype.setPoliciesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.Policy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Policy}
 */
proto.PolicyList.prototype.addPolicies = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Policy, opt_index);
};
proto.PolicyList.prototype.clearPoliciesList = function () {
    this.setPoliciesList([]);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Role = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.Role.displayName = 'proto.Role';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Role.prototype.toObject = function (opt_includeInstance) {
        return proto.Role.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Role} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Role.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            policyName: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Role}
 */
proto.Role.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Role;
    return proto.Role.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Role}
 */
proto.Role.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPolicyName(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Role.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Role.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Role} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Role.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPolicyName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.Role.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.Role.prototype.setName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string policy_name = 2;
 * @return {string}
 */
proto.Role.prototype.getPolicyName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/** @param {string} value */
proto.Role.prototype.setPolicyName = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoleList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.RoleList.repeatedFields_, null);
};
goog.inherits(proto.RoleList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.RoleList.displayName = 'proto.RoleList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RoleList.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.RoleList.prototype.toObject = function (opt_includeInstance) {
        return proto.RoleList.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.RoleList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.RoleList.toObject = function (includeInstance, msg) {
        var f, obj = {
            rolesList: jspb.Message.toObjectList(msg.getRolesList(), proto.Role.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoleList}
 */
proto.RoleList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.RoleList;
    return proto.RoleList.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoleList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoleList}
 */
proto.RoleList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.Role;
                reader.readMessage(value, proto.Role.deserializeBinaryFromReader);
                msg.addRoles(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoleList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.RoleList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoleList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoleList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRolesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.Role.serializeBinaryToWriter);
    }
};
/**
 * repeated Role roles = 1;
 * @return {!Array<!proto.Role>}
 */
proto.RoleList.prototype.getRolesList = function () {
    return /** @type{!Array<!proto.Role>} */ (jspb.Message.getRepeatedWrapperField(this, proto.Role, 1));
};
/** @param {!Array<!proto.Role>} value */
proto.RoleList.prototype.setRolesList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Role}
 */
proto.RoleList.prototype.addRoles = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Role, opt_index);
};
proto.RoleList.prototype.clearRolesList = function () {
    this.setRolesList([]);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,